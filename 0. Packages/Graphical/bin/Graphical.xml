<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Graphical</name>
    </assembly>
    <members>
        <member name="T:Graphical.Core.SweepEvent">
            <summary>
            Class to hold information about Vertex and Edges on 
            the SweepLine algorithm. SweepEvents are compared by X, then Y coordinates
            of the vertex. If same vertex, Pairs are compared insted.
            </summary>
        </member>
        <member name="P:Graphical.Core.SweepEvent.Vertex">
            <summary>
            Vertex associated with the event
            </summary>
        </member>
        <member name="P:Graphical.Core.SweepEvent.Pair">
            <summary>
            SweepEvent pair
            </summary>
        </member>
        <member name="P:Graphical.Core.SweepEvent.Edge">
            <summary>
            Edge associated with the event
            </summary>
        </member>
        <member name="P:Graphical.Core.SweepEvent.IsLeft">
            <summary>
            Determines if SweepEvent comes first on a left to right direction
            </summary>
        </member>
        <member name="P:Graphical.Core.SweepEvent.IsInside">
            <summary>
            Flags if associated edge is inside other polygon on boolean operations
            </summary>
        </member>
        <member name="P:Graphical.Core.SweepEvent.InOut">
            <summary>
            Flags if the associated edge represents an in-out transition into the polygon
            in an upwards, y-axis direction.
            </summary>
        </member>
        <member name="F:Graphical.Core.SweepEvent.Label">
            <summary>
            Label to define how a SweepEvent contributes to a polygon boolean operation.
            </summary>
        </member>
        <member name="M:Graphical.Core.SweepEvent.#ctor(Graphical.Geometry.gVertex,Graphical.Geometry.gEdge)">
            <summary>
            SweepEvent default constructor
            </summary>
            <param name="vertex"></param>
            <param name="edge"></param>
        </member>
        <member name="M:Graphical.Core.SweepEvent.UpdatePairVertex(Graphical.Geometry.gVertex)">
            <summary>
            Updates the edge and Pair event with a new gVertex
            </summary>
            <param name="newPairVertex"></param>
        </member>
        <member name="M:Graphical.Core.SweepEvent.CompareTo(Graphical.Core.SweepEvent)">
            <summary>
            SweepEvent comparer.
            A SweepEvent is considered less than other if having smaller X, then Y and then Z.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Graphical.Core.SweepEvent.Equals(Graphical.Core.SweepEvent)">
            <summary>
            SweepEvent equality comparer. SweepEvents are considered equals if have the same edge.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Graphical.Core.SweepEvent.op_LessThan(Graphical.Core.SweepEvent,Graphical.Core.SweepEvent)">
            <summary>
            Less Than operator
            </summary>
            <param name="sw1"></param>
            <param name="sw2"></param>
            <returns></returns>
        </member>
        <member name="M:Graphical.Core.SweepEvent.op_GreaterThan(Graphical.Core.SweepEvent,Graphical.Core.SweepEvent)">
            <summary>
            Greater Than operator
            </summary>
            <param name="sw1"></param>
            <param name="sw2"></param>
            <returns></returns>
        </member>
        <member name="M:Graphical.Core.SweepEvent.op_LessThanOrEqual(Graphical.Core.SweepEvent,Graphical.Core.SweepEvent)">
            <summary>
            Less or Equal Than operator
            </summary>
            <param name="sw1"></param>
            <param name="sw2"></param>
            <returns></returns>
        </member>
        <member name="M:Graphical.Core.SweepEvent.op_GreaterThanOrEqual(Graphical.Core.SweepEvent,Graphical.Core.SweepEvent)">
            <summary>
            Greater or Equal Than operator
            </summary>
            <param name="sw1"></param>
            <param name="sw2"></param>
            <returns></returns>
        </member>
        <member name="M:Graphical.Core.SweepEvent.ToString">
            <summary>
            SweepEvent string override
            </summary>
            <returns></returns>
        </member>
        <member name="T:Graphical.Core.SortEventsVerticalAscendingComparer">
            <summary>
            Custom Vertical Ascending IComparer for SweepEvent.
            Lower SweepEvent has lowest X. At same X, lowest Y and finally lowest Z.
            </summary>
        </member>
        <member name="M:Graphical.Core.SortEventsVerticalAscendingComparer.Compare(Graphical.Core.SweepEvent,Graphical.Core.SweepEvent)">
            <summary>
            Custom SweepEvent Vertical Ascending Comparer
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:Graphical.Core.SweepLine">
            <summary>
            Helper class to implement Bentley-Ottmann Algorithm for
            polygon self-intersections and boolean operations.
            </summary>
        </member>
        <member name="M:Graphical.Core.SweepLine.BelowEvent(System.Int32)">
            <summary>
            Returns the event below SweepEvent on index, null if none
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Graphical.Core.SweepLine.AboveEvent(System.Int32)">
            <summary>
            Returns the event above SweepEvent on index, null if none
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Graphical.Core.SweepLine.ByEdges(System.Collections.Generic.List{Graphical.Geometry.gEdge})">
            <summary>
            SweepLine constructor by a list of gEdges
            </summary>
            <param name="edges"></param>
            <returns>SweepLine</returns>
        </member>
        <member name="M:Graphical.Core.SweepLine.ByPolygons(System.Collections.Generic.List{Graphical.Geometry.gPolygon})">
            <summary>
            SweepLine constructor by a list of gPolygons
            </summary>
            <param name="polygons"></param>
            <returns>SweepLine</returns>
        </member>
        <member name="M:Graphical.Core.SweepLine.ProcessInsideFlags(Graphical.Core.SweepEvent,Graphical.Core.SweepEvent)">
            <summary>
            This methods is call after intersection is calculated
            </summary>
            <param name="next"></param>
            <param name="prev"></param>
        </member>
        <member name="T:Graphical.Extensions.NumericExtensions">
            <summary>
            Extensions methods for numerical objects
            </summary>
        </member>
        <member name="M:Graphical.Extensions.NumericExtensions.Map(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Double extension method.
            Maps a double value from a given range to a new one.
            </summary>
            <param name="value">Value to map</param>
            <param name="min">Original range minimum value</param>
            <param name="max">Original range maximum value</param>
            <param name="newMin">Target range minimum value</param>
            <param name="newMax">Target range maximum value</param>
            <returns name="mapped">Mapped value to target range</returns>
        </member>
        <member name="M:Graphical.Extensions.NumericExtensions.AlmostEqualTo(System.Double,System.Double)">
            <summary>
            Determines if the difference between two values is less or equal to
            a constant decimal value of 1e-5
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns></returns>
        </member>
        <member name="M:Graphical.Extensions.NumericExtensions.Round(System.Double,System.Int32)">
            <summary>
            Rounds a value to a given number of decimals.
            </summary>
            <param name="value"></param>
            <param name="decimals">Default 6 decimals</param>
            <returns></returns>
        </member>
        <member name="M:Graphical.Extensions.NumericExtensions.ToDegrees(System.Double)">
            <summary>
            Converts a radian angle to degrees
            </summary>
            <param name="radians"></param>
            <returns></returns>
        </member>
        <member name="M:Graphical.Extensions.NumericExtensions.ToRadians(System.Double)">
            <summary>
            Converts a degree angle to radians
            </summary>
            <param name="degrees"></param>
            <returns></returns>
        </member>
        <member name="T:Graphical.Extensions.ListExtensions">
            <summary>
            Static class extending List funtionality
            </summary>
        </member>
        <member name="M:Graphical.Extensions.ListExtensions.AddItemSorted``1(System.Collections.Generic.List{``0},``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            List extension method.
            Given an ascending sorted list add an item mantaining list's order. This method modifies the list instance.
            </summary>
            <typeparam name="T">IComparable</typeparam>
            <param name="list"></param>
            <param name="item"></param>
            <param name="comparer"></param>
        </member>
        <member name="M:Graphical.Extensions.ListExtensions.AddItemsSorted``1(System.Collections.Generic.List{``0},``0[],System.Collections.Generic.IComparer{``0})">
            <summary>
            List extension method.
            Given an ascending sorted list, adds items mantaining list's order. This method modifies the list instance.
            </summary>
            <typeparam name="T">IComparable</typeparam>
            <param name="list"></param>
            <param name="items"></param>
            <param name="comparer"></param>
        </member>
        <member name="M:Graphical.Extensions.ListExtensions.BisectIndex``1(System.Collections.Generic.List{``0},``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            List extension method.
            Returns the index of an item on a ascending sorted list.
            </summary>
            <typeparam name="T">IComparable</typeparam>
            <param name="list"></param>
            <param name="item"></param>
            <returns name="index">Item's index</returns>
            <param name="comparer"></param>
        </member>
        <member name="M:Graphical.Extensions.ListExtensions.Chop``1(System.Collections.Generic.List{``0},System.Int32)">
            <summary>
            List extension method.
            Splits a list into sublist with the given length of items
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="T:Graphical.Geometry.gBoundingBox">
            <summary>
            Axis Aligned Bounding Box
            </summary>
        </member>
        <member name="P:Graphical.Geometry.gBoundingBox.MinVertex">
            <summary>
            Bounding Box's minimum vertex
            </summary>
        </member>
        <member name="P:Graphical.Geometry.gBoundingBox.MaxVertex">
            <summary>
            Bounding Box's maximum vertex
            </summary>
        </member>
        <member name="M:Graphical.Geometry.gBoundingBox.ByMinVertexMaxVertex(Graphical.Geometry.gVertex,Graphical.Geometry.gVertex)">
            <summary>
            Creates a new Bounding Box from a minimum and maximum vertices
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:Graphical.Geometry.gBoundingBox.Intersects(Graphical.Geometry.gBoundingBox)">
            <summary>
            Determines if two Axis Aligned Bounding Boxes intersect
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:Graphical.Geometry.gPolygon">
            <summary>
            gPolygon class to hold graph´s polygon information in relation to its function on the graph
            like if it is internal or limit boundary.
            </summary>
        </member>
        <member name="P:Graphical.Geometry.gPolygon.id">
            <summary>
            Polygon's id
            </summary>
        </member>
        <member name="P:Graphical.Geometry.gPolygon.isBoundary">
            <summary>
            Flag to check polygons role: Internal or Boundary
            </summary>
        </member>
        <member name="F:Graphical.Geometry.gPolygon.edges">
            <summary>
            Polygon's edges
            </summary>
        </member>
        <member name="F:Graphical.Geometry.gPolygon.vertices">
            <summary>
            Polygon's Vertices
            </summary>
        </member>
        <member name="P:Graphical.Geometry.gPolygon.Vertices">
            <summary>
            gPolygon's vertices
            </summary>
        </member>
        <member name="P:Graphical.Geometry.gPolygon.Edges">
            <summary>
            gPolygon's edges
            </summary>
        </member>
        <member name="P:Graphical.Geometry.gPolygon.IsClosed">
            <summary>
            Determines if the gPolygon is closed.
            </summary>
        </member>
        <member name="M:Graphical.Geometry.gPolygon.ByVertices(System.Collections.Generic.List{Graphical.Geometry.gVertex},System.Boolean)">
            <summary>
            Creates a new gPolygon by a list of ordered vertices.
            </summary>
            <param name="vertices"></param>
            <param name="isExternal"></param>
            <returns></returns>
        </member>
        <member name="M:Graphical.Geometry.gPolygon.ContainsVertex(Graphical.Geometry.gVertex)">
            <summary>
            Determines if a gVertex is inside the gPolygon using Fast Winding Number method
            </summary>
            <param name="vertex"></param>
            <returns></returns>
        </member>
        <member name="M:Graphical.Geometry.gPolygon.ContainsEdge(Graphical.Geometry.gEdge)">
            <summary>
            Determines if a gEdge is inside the gPolygon by comparing
            it's start, end and mid vertices.
            Note: Prone to error if polygon has edges intersecting the edge not at mid vertex?
            </summary>
            <param name="edge"></param>
            <returns></returns>
        </member>
        <member name="M:Graphical.Geometry.gPolygon.IsPlanar(Graphical.Geometry.gPolygon)">
            <summary>
            Checks if a polygon is planar
            </summary>
            <param name="polygon">gPolygon</param>
            <returns>boolean</returns>
        </member>
        <member name="M:Graphical.Geometry.gPolygon.Coplanar(Graphical.Geometry.gPolygon,Graphical.Geometry.gPolygon)">
            <summary>
            Checks if two gPolygons are coplanar.
            </summary>
            <param name="polygon">gPolygon</param>
            <param name="otherPolygon">Other gPolygon</param>
            <returns></returns>
        </member>
        <member name="M:Graphical.Geometry.gPolygon.Intersects(Graphical.Geometry.gPolygon)">
            <summary>
            Determines if two polygons are intersecting
            </summary>
            <param name="polygon"></param>
            <returns></returns>
        </member>
        <member name="M:Graphical.Geometry.gPolygon.Union(Graphical.Geometry.gPolygon)">
            <summary>
            Performes a Union boolean operation between this polygon and a clipping one.
            </summary>
            <param name="clip"></param>
            <returns></returns>
        </member>
        <member name="M:Graphical.Geometry.gPolygon.Difference(Graphical.Geometry.gPolygon)">
            <summary>
            Performes a Difference boolean operation between this polygon and a clipping one.
            </summary>
            <param name="clip"></param>
            <returns></returns>
        </member>
        <member name="M:Graphical.Geometry.gPolygon.Intersection(Graphical.Geometry.gPolygon)">
            <summary>
            Performes a Intersection boolean operation between this polygon and a clipping one.
            </summary>
            <param name="clip"></param>
            <returns></returns>
        </member>
        <member name="M:Graphical.Geometry.gPolygon.Clone">
            <summary>
            Clone method for gPolygon
            </summary>
            <returns>Cloned gPolygon</returns>
        </member>
        <member name="M:Graphical.Geometry.gVector.ToString">
            <summary>
            Override of ToStringMethod
            </summary>
            <returns></returns>
        </member>
        <member name="T:Graphical.Geometry.gVertex">
            <summary>
            Representation of vertex points on a graph.
            </summary>
        </member>
        <member name="M:Graphical.Geometry.gVertex.ByCoordinates(System.Double,System.Double,System.Double)">
            <summary>
            gVertex constructor method by a given set of XYZ coordinates
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:Graphical.Geometry.gVertex.MidVertex(Graphical.Geometry.gVertex,Graphical.Geometry.gVertex)">
            <summary>
            Returns the vertex in between two vertices.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns name="midVertex"></returns>
        </member>
        <member name="M:Graphical.Geometry.gVertex.Coplanar(System.Collections.Generic.List{Graphical.Geometry.gVertex})">
            <summary>
            Checks if a list of vertices are coplanar. True for three or less vertices.
            </summary>
            <param name="vertices"></param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Graphical.Geometry.gVertex.Equals(Graphical.Geometry.gVertex)">
            <summary>
            Override of Equals method
            </summary>
            <param name="obj"></param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Graphical.Geometry.gVertex.GetHashCode">
            <summary>
            Override of GetHashCode method
            </summary>
            <returns></returns>
        </member>
        <member name="M:Graphical.Geometry.gVertex.ToString">
            <summary>
            Override of ToStringMethod
            </summary>
            <returns></returns>
        </member>
        <member name="M:Graphical.Geometry.gVertex.Clone">
            <summary>
            Implementation of Clone method
            </summary>
        </member>
        <member name="T:Graphical.Geometry.gEdge">
            <summary>
            Representation of Edges on a graph
            </summary>
        </member>
        <member name="P:Graphical.Geometry.gEdge.StartVertex">
            <summary>
            StartVertex
            </summary>
        </member>
        <member name="P:Graphical.Geometry.gEdge.EndVertex">
            <summary>
            EndVertex
            </summary>
        </member>
        <member name="M:Graphical.Geometry.gEdge.ByStartVertexEndVertex(Graphical.Geometry.gVertex,Graphical.Geometry.gVertex)">
            <summary>
            gEdge constructor by start and end vertices
            </summary>
            <param name="start">Start vertex</param>
            <param name="end">End gVertex</param>
            <returns name="edge">edge</returns>
        </member>
        <member name="M:Graphical.Geometry.gEdge.Contains(Graphical.Geometry.gVertex)">
            <summary>
            Method to check if vertex belongs to edge
            </summary>
            <param name="vertex"></param>
            <returns></returns>
        </member>
        <member name="M:Graphical.Geometry.gEdge.GetVertexPair(Graphical.Geometry.gVertex)">
            <summary>
            Method to return the other end vertex of the gEdge
            </summary>
            <param name="vertex"></param>
            <returns></returns>
        </member>
        <member name="M:Graphical.Geometry.gEdge.Equals(System.Object)">
            <summary>
            Override of Equal Method
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Graphical.Geometry.gEdge.GetHashCode">
            <summary>
            Override of GetHashCode Method
            </summary>
            <returns></returns>
        </member>
        <member name="M:Graphical.Geometry.gEdge.ToString">
            <summary>
            Override of ToString method
            </summary>
            <returns></returns>
        </member>
        <member name="T:Graphical.Geometry.gBase">
            <summary>
            Base abstract class for all spatial geometries
            </summary>
        </member>
        <member name="P:Graphical.Geometry.gBase.BoundingBox">
            <summary>
            Geometry's Axis Aligned Bounding Box
            </summary>
        </member>
        <member name="T:Graphical.DataStructures.BinaryHeapType">
            <summary>
            Custom Enum to determine behaviour of BinaryHeap
            </summary>
        </member>
        <member name="F:Graphical.DataStructures.BinaryHeapType.MinHeap">
            <summary>
            BinaryHeap's items sorted in increasing order
            </summary>
        </member>
        <member name="F:Graphical.DataStructures.BinaryHeapType.MaxHeap">
            <summary>
            BinaryHeap's items sorted in decreasing order
            </summary>
        </member>
        <member name="T:Graphical.DataStructures.BinaryHeap`1">
            <summary>
            Abstract BinaryHeap class
            </summary>
            <typeparam name="TObject">Type of object implementing IComparable<TObject> interface</TObject></typeparam>
        </member>
        <member name="P:Graphical.DataStructures.BinaryHeap`1.Capacity">
            <summary>
            HeapItem array capacity
            </summary>
        </member>
        <member name="P:Graphical.DataStructures.BinaryHeap`1.Size">
            <summary>
            HeapItem array size
            </summary>
        </member>
        <member name="P:Graphical.DataStructures.BinaryHeap`1.HeapType">
            <summary>
            Type of BinaryHeap: Min or Max.
            </summary>
        </member>
        <member name="M:Graphical.DataStructures.BinaryHeap`1.#ctor(Graphical.DataStructures.BinaryHeapType)">
            <summary>
            BinaryHeap default constructor
            </summary>
            <param name="heapType">MinHeap or MaxHeap</param>
        </member>
        <member name="M:Graphical.DataStructures.BinaryHeap`1.#ctor(Graphical.DataStructures.BinaryHeapType,System.Int32)">
            <summary>
            BinaryHeap constructor with initial capacity
            </summary>
            <param name="heapType">MinHeap or MaxHeap</param>
            <param name="capacity">Heap initial capacity</param>
        </member>
        <member name="M:Graphical.DataStructures.BinaryHeap`1.Swap(System.Int32,System.Int32)">
            <summary>
            Swap items
            </summary>
            <param name="firstIndex">Index of first item</param>
            <param name="secondIndex">Index of second item</param>
        </member>
        <member name="M:Graphical.DataStructures.BinaryHeap`1.Any">
            <summary>
            Determines whether the heap contains any element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Graphical.DataStructures.BinaryHeap`1.Peek">
            <summary>
            Returns first TObject from the Heap
            </summary>
            <returns>Object of first item.</returns>
        </member>
        <member name="M:Graphical.DataStructures.BinaryHeap`1.Take">
            <summary>
            Returns first TObject and removes it from the Heap
            </summary>
            <returns>First TObject</returns>
        </member>
        <member name="M:Graphical.DataStructures.BinaryHeap`1.Clear">
            <summary>
            Removes all items on the Heap
            </summary>
        </member>
        <member name="M:Graphical.DataStructures.BinaryHeap`1.Add(`0)">
            <summary>
            Adds a new TObject on the Heap
            </summary>
            <param name="item">Heap item</param>
        </member>
        <member name="M:Graphical.DataStructures.BinaryHeap`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a range of TObjects to the Heap
            </summary>
            <param name="items">Set of items</param>
        </member>
        <member name="T:Graphical.DataStructures.BinaryHeap`2">
            <summary>
            Abstract BinaryHeap class
            </summary>
            <typeparam name="TObject">Type of object to store</typeparam>
            <typeparam name="TValue">Type of value associated to the object, implementing IComparable interface</typeparam>
        </member>
        <member name="M:Graphical.DataStructures.BinaryHeap`2.#ctor(Graphical.DataStructures.BinaryHeapType)">
            <summary>
            BinaryHeap default constructor
            </summary>
            <param name="heapType">MinHeap or MaxHeap</param>
        </member>
        <member name="M:Graphical.DataStructures.BinaryHeap`2.#ctor(Graphical.DataStructures.BinaryHeapType,System.Int32)">
            <summary>
            BinaryHeap constructor with initial capacity
            </summary>
            <param name="heapType">MinHeap or MaxHeap</param>
            <param name="capacity">Heap initial capacity</param>
        </member>
        <member name="M:Graphical.DataStructures.BinaryHeap`2.Add(`0,`1)">
            <summary>
            Adds a new TObject with an associated TValue to the Heap
            </summary>
            <param name="item">TObject</param>
            <param name="value">TValue</param>
        </member>
        <member name="M:Graphical.DataStructures.BinaryHeap`2.Take">
            <summary>
            Returns the first TObject and removes it from the Heap
            </summary>
            <returns>First TObject</returns>
        </member>
        <member name="M:Graphical.DataStructures.BinaryHeap`2.Peek">
            <summary>
            Returns first TObject from the Heap
            </summary>
            <returns>Object of first item.</returns>
        </member>
        <member name="T:Graphical.DataStructures.MinBinaryHeap`1">
            <summary>
            MinBinaryHeap class
            </summary>
            <typeparam name="TObject">Type of object implementing IComparable<TObject> interface</TObject></typeparam>
        </member>
        <member name="M:Graphical.DataStructures.MinBinaryHeap`1.#ctor">
            <summary>
            MinBinaryHeap default constructor
            </summary>
        </member>
        <member name="M:Graphical.DataStructures.MinBinaryHeap`1.#ctor(System.Int32)">
            <summary>
            MinBinaryHeap constructor with initial capacity
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="T:Graphical.DataStructures.MinBinaryHeap`2">
            <summary>
            MinBinaryHeap class
            </summary>
            <typeparam name="TObject">Type of object to store</typeparam>
            <typeparam name="TValue">Type of value associated to the object, implementing IComparable interface</typeparam>
        </member>
        <member name="M:Graphical.DataStructures.MinBinaryHeap`2.#ctor">
            <summary>
            MinBinaryHeap default constructor
            </summary>
        </member>
        <member name="M:Graphical.DataStructures.MinBinaryHeap`2.#ctor(System.Int32)">
            <summary>
            MinBinaryHeap constructor with initial capacity
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="T:Graphical.DataStructures.MaxBinaryHeap`1">
            <summary>
            MaxBinaryHeap class
            </summary>
            <typeparam name="TObject">Type of object implementing IComparable<TObject> interface</TObject></typeparam>
        </member>
        <member name="M:Graphical.DataStructures.MaxBinaryHeap`1.#ctor">
            <summary>
            MaxBinaryHeap default constructor
            </summary>
        </member>
        <member name="M:Graphical.DataStructures.MaxBinaryHeap`1.#ctor(System.Int32)">
            <summary>
            MaxBinaryHeap constructor with initial capacity
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="T:Graphical.DataStructures.MaxBinaryHeap`2">
            <summary>
            MaxBinaryHeap class
            </summary>
            <typeparam name="TObject">Type of object to store</typeparam>
            <typeparam name="TValue">Type of value associated to the object, implementing IComparable interface</typeparam>
        </member>
        <member name="M:Graphical.DataStructures.MaxBinaryHeap`2.#ctor">
            <summary>
            MaxBinaryHeap default constructor
            </summary>
        </member>
        <member name="M:Graphical.DataStructures.MaxBinaryHeap`2.#ctor(System.Int32)">
            <summary>
            MaxBinaryHeap constructor with initial capacity
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="T:Graphical.DataStructures.HeapItem">
            <summary>
            Class to use in BinaryHeaps when the object is not of type IComparable
            </summary>
        </member>
        <member name="P:Graphical.DataStructures.HeapItem.Item">
            <summary>
            Object to store
            </summary>
        </member>
        <member name="P:Graphical.DataStructures.HeapItem.Value">
            <summary>
            Item's associated value
            </summary>
        </member>
        <member name="M:Graphical.DataStructures.HeapItem.#ctor(System.Object,System.IComparable)">
            <summary>
            HeapItem default constructor
            </summary>
            <param name="data">Object to store</param>
            <param name="value">Associated value</param>
        </member>
        <member name="M:Graphical.DataStructures.HeapItem.SetValue(System.IComparable)">
            <summary>
            Method to set/update HeapItem's value
            </summary>
            <param name="newValue"></param>
        </member>
        <member name="M:Graphical.DataStructures.HeapItem.Equals(Graphical.DataStructures.HeapItem)">
            <summary>
            HeapItem's equality comparer
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Graphical.DataStructures.HeapItem.GetHashCode">
            <summary>
            HeapItem's HashCode
            </summary>
            <returns></returns>
        </member>
        <member name="M:Graphical.DataStructures.HeapItem.CompareTo(Graphical.DataStructures.HeapItem)">
            <summary>
            Implementation of IComparable interface
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Graphical.DataStructures.HeapItem.op_LessThan(Graphical.DataStructures.HeapItem,Graphical.DataStructures.HeapItem)">
            <summary>
            IComparable less than operator
            </summary>
            <param name="item1"></param>
            <param name="item2"></param>
            <returns></returns>
        </member>
        <member name="M:Graphical.DataStructures.HeapItem.op_GreaterThan(Graphical.DataStructures.HeapItem,Graphical.DataStructures.HeapItem)">
            <summary>
            IComparable greater than operator
            </summary>
            <param name="item1"></param>
            <param name="item2"></param>
            <returns></returns>
        </member>
        <member name="M:Graphical.DataStructures.HeapItem.ToString">
            <summary>
            HeapItem's string representation
            </summary>
            <returns></returns>
        </member>
        <member name="T:Graphical.DataStructures.PriorityQ`1">
            <summary>
            Binary Priority Queue
            </summary>
            <typeparam name="TObject">Type of object to store implementing IEquatable and IComparable interface</typeparam>
        </member>
        <member name="P:Graphical.DataStructures.PriorityQ`1.HeapIndices">
            <summary>
            HeapIndices dictionary. For testing purposes only.
            </summary>
        </member>
        <member name="M:Graphical.DataStructures.PriorityQ`1.#ctor(Graphical.DataStructures.BinaryHeapType)">
            <summary>
            PriorityQ default constructor
            </summary>
            <param name="heapType">MinHeap or MaxHeap</param>
        </member>
        <member name="M:Graphical.DataStructures.PriorityQ`1.#ctor(Graphical.DataStructures.BinaryHeapType,System.Int32)">
            <summary>
            PriorityQ constructor with initial capacity.
            </summary>
            <param name="heapType">MinHeap or MaxHeap</param>
            <param name="capacity">Initial capacity</param>
        </member>
        <member name="M:Graphical.DataStructures.PriorityQ`1.Add(`0)">
            <summary>
            Adds a new TObject to the Heap
            </summary>
            <param name="item">TObject to add</param>
        </member>
        <member name="M:Graphical.DataStructures.PriorityQ`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a range of TObjects to the Heap
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:Graphical.DataStructures.PriorityQ`1.UpdateAtIndex(System.Int32)">
            <summary>
            Updates the TObject item and restores the Heap property
            </summary>
            <param name="index">Existing TObject in Heap with new comparison value</param>
        </member>
        <member name="M:Graphical.DataStructures.PriorityQ`1.Peek">
            <summary>
            Returns the first item on the Heap
            </summary>
            <returns></returns>
        </member>
        <member name="M:Graphical.DataStructures.PriorityQ`1.Take">
            <summary>
            Returns the first item 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Graphical.DataStructures.PriorityQ`1.IndexOf(`0)">
            <summary>
            Returns the index of an item. If item no in PriorityQ, returns -1
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Graphical.DataStructures.PriorityQ`1.Clear">
            <summary>
            Removes all items from the queue
            </summary>
        </member>
        <member name="T:Graphical.DataStructures.PriorityQ`2">
            <summary>
            Binary Priority Queue
            </summary>
            <typeparam name="TObject">Type of object to store implementing IEquatable interface</typeparam>
            <typeparam name="TValue">Type of value associated with TObject implementing IComparable</typeparam>
        </member>
        <member name="M:Graphical.DataStructures.PriorityQ`2.#ctor(Graphical.DataStructures.BinaryHeapType)">
            <summary>
            PriorityQ default constructor
            </summary>
            <param name="heapType">MinHeap or MaxHeap</param>
        </member>
        <member name="M:Graphical.DataStructures.PriorityQ`2.#ctor(Graphical.DataStructures.BinaryHeapType,System.Int32)">
            <summary>
            PriorityQ constructor with initial capacity.
            </summary>
            <param name="heapType">MinHeap or MaxHeap</param>
            <param name="capacity">Initial capacity</param>
        </member>
        <member name="M:Graphical.DataStructures.PriorityQ`2.Add(`0,`1)">
            <summary>
            Adds a new TObject with an associated TValue to the Heap
            </summary>
            <param name="item">TObject</param>
            <param name="value">TValue</param>
        </member>
        <member name="M:Graphical.DataStructures.PriorityQ`2.Peek">
            <summary>
            Returns first TObject from the Heap
            </summary>
            <returns>Object of first item.</returns>
        </member>
        <member name="M:Graphical.DataStructures.PriorityQ`2.PeekValue">
            <summary>
            Returns the value associated with the first TObject from the Heap
            </summary>
            <returns></returns>
        </member>
        <member name="M:Graphical.DataStructures.PriorityQ`2.Take">
            <summary>
            Returns the first TObject and removes it from the Heap
            </summary>
            <returns>First TObject</returns>
        </member>
        <member name="M:Graphical.DataStructures.PriorityQ`2.GetValue(`0)">
            <summary>
            Gets the associated value to a given TObject
            </summary>
            <param name="item">TObject</param>
            <returns>Associated value</returns>
        </member>
        <member name="M:Graphical.DataStructures.PriorityQ`2.UpdateItem(`0,`1)">
            <summary>
            Updates the TObject item and restores the Heap property
            </summary>
            <param name="item">TObject in Heap </param>
            <param name="value">Value to update object with</param>
        </member>
        <member name="T:Graphical.DataStructures.MinPriorityQ`1">
            <summary>
            MinBinary Priority Queue
            </summary>
            <typeparam name="TObject">Type of object to store implementing IEquatable and IComparable interfaces</typeparam>
        </member>
        <member name="M:Graphical.DataStructures.MinPriorityQ`1.#ctor">
            <summary>
            MinPriorityQ default constructor
            </summary>
        </member>
        <member name="M:Graphical.DataStructures.MinPriorityQ`1.#ctor(System.Int32)">
            <summary>
            MinPriorityQ constructor with initial capacity.
            </summary>
            <param name="capacity">Initial capacity</param>
        </member>
        <member name="T:Graphical.DataStructures.MinPriorityQ`2">
            <summary>
            MinBinary Priority Queue
            </summary>
            <typeparam name="TObject">Type of object to store implementing IEquatable interface</typeparam>
            <typeparam name="TValue">Type of value associated with TObject implementing IComparable</typeparam>
        </member>
        <member name="M:Graphical.DataStructures.MinPriorityQ`2.#ctor">
            <summary>
            MinPriorityQ default constructor
            </summary>
        </member>
        <member name="M:Graphical.DataStructures.MinPriorityQ`2.#ctor(System.Int32)">
            <summary>
            MinPriorityQ constructor with initial capacity.
            </summary>
            <param name="capacity">Initial capacity</param>
        </member>
        <member name="T:Graphical.DataStructures.MaxPriorityQ`1">
            <summary>
            MaxBinary Priority Queue
            </summary>
            <typeparam name="TObject">Type of object to store implementing IEquatable interface</typeparam>
            <typeparam name="TValue">Type of value associated with TObject implementing IComparable</typeparam>
        </member>
        <member name="M:Graphical.DataStructures.MaxPriorityQ`1.#ctor">
            <summary>
            MaxPriorityQ default constructor
            </summary>
        </member>
        <member name="M:Graphical.DataStructures.MaxPriorityQ`1.#ctor(System.Int32)">
            <summary>
            MaxPriorityQ constructor with initial capacity.
            </summary>
            <param name="capacity">Initial capacity</param>
        </member>
        <member name="T:Graphical.DataStructures.MaxPriorityQ`2">
            <summary>
            MaxBinary Priority Queue
            </summary>
            <typeparam name="TObject">Type of object to store implementing IEquatable interface</typeparam>
            <typeparam name="TValue">Type of value associated with TObject implementing IComparable</typeparam>
        </member>
        <member name="M:Graphical.DataStructures.MaxPriorityQ`2.#ctor">
            <summary>
            MaxPriorityQ default constructor
            </summary>
        </member>
        <member name="M:Graphical.DataStructures.MaxPriorityQ`2.#ctor(System.Int32)">
            <summary>
            MaxPriorityQ constructor with initial capacity.
            </summary>
            <param name="capacity">Initial capacity</param>
        </member>
        <member name="T:Graphical.Graphs.Graph">
            <summary>
            Representation of a Graph.
            Graph contains a Dictionary where
            </summary>
        </member>
        <member name="P:Graphical.Graphs.Graph.graphID">
            <summary>
            GUID to verify uniqueness of graph when cloned
            </summary>
        </member>
        <member name="F:Graphical.Graphs.Graph.polygons">
            <summary>
            Polygons dictionary with their Id as dictionary key
            </summary>
        </member>
        <member name="P:Graphical.Graphs.Graph.pId">
            <summary>
            Polygon's Id counter.
            </summary>
        </member>
        <member name="F:Graphical.Graphs.Graph.graph">
            <summary>
            Dictionary with vertex as key and values edges associated with the vertex.
            </summary>
        </member>
        <member name="P:Graphical.Graphs.Graph.vertices">
            <summary>
            Graph's vertices
            </summary>
        </member>
        <member name="P:Graphical.Graphs.Graph.edges">
            <summary>
            Graph's edges
            </summary>
        </member>
        <member name="M:Graphical.Graphs.Graph.Contains(Graphical.Geometry.gVertex)">
            <summary>
            Contains mathod for vertex in graph
            </summary>
            <param name="vertex"></param>
            <returns></returns>
        </member>
        <member name="M:Graphical.Graphs.Graph.Contains(Graphical.Geometry.gEdge)">
            <summary>
            Contains method for edges in graph
            </summary>
            <param name="edge"></param>
            <returns></returns>
        </member>
        <member name="M:Graphical.Graphs.Graph.AddEdge(Graphical.Geometry.gEdge)">
            <summary>
            Add edge to the analisys graph
            </summary>
            <param name="edge">New edge</param>
        </member>
        <member name="M:Graphical.Graphs.Graph.BuildPolygons">
            <summary>
            Computes edges and creates polygons from those connected by vertices.
            </summary>
        </member>
        <member name="M:Graphical.Graphs.Graph.Clone">
            <summary>
            Implementation of IClonable interface
            </summary>
            <returns></returns>
        </member>
        <member name="T:Graphical.Graphs.VisibilityGraph">
            <summary>
            Construction of VisibilityGraph Graph
            </summary>
        </member>
        <member name="M:Graphical.Graphs.VisibilityGraph.VisibleVertices(Graphical.Geometry.gVertex,Graphical.Graphs.Graph,Graphical.Geometry.gVertex,Graphical.Geometry.gVertex,System.Collections.Generic.List{Graphical.Geometry.gVertex},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="centre"></param>
            <param name="baseGraph"></param>
            <param name="origin"></param>
            <param name="destination"></param>
            <param name="singleVertices"></param>
            <param name="scan"></param>
            <returns name="visibleVertices">List of vertices visible from the analysed vertex</returns>
        </member>
        <member name="M:Graphical.Graphs.VisibilityGraph.AddEdges(Graphical.Graphs.VisibilityGraph,System.Collections.Generic.List{Graphical.Geometry.gEdge})">
            <summary>
            Adds specific lines as gEdges to the visibility graph
            </summary>
            <param name="visibilityGraph">VisibilityGraph Graph</param>
            <param name="edges">Lines to add as new gEdges</param>
            <returns></returns>
        </member>
        <member name="M:Graphical.Graphs.VisibilityGraph.AddVertices(Graphical.Graphs.VisibilityGraph,System.Collections.Generic.List{Graphical.Geometry.gVertex},System.Boolean)">
            <summary>
            Adds specific points as gVertices to the VisibilityGraph Graph
            </summary>
            <param name="visibilityGraph">VisibilityGraph Graph</param>
            <param name="vertices">Points to add as gVertices</param>
            <returns></returns>
        </member>
        <member name="T:Graphical.Graphs.EdgeKey">
            <summary>
            VisibilityGraph graph's EdgeKey class to create a tree data structure.
            </summary>
        </member>
        <member name="M:Graphical.Graphs.EdgeKey.Equals(System.Object)">
            <summary>
            Override of Equals method
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Graphical.Graphs.EdgeKey.GetHashCode">
            <summary>
            Override of GetHashCode method
            </summary>
            <returns></returns>
        </member>
        <member name="M:Graphical.Graphs.EdgeKey.CompareTo(Graphical.Graphs.EdgeKey)">
            <summary>
            Implementation of IComparable interaface
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Graphical.Graphs.EdgeKey.op_LessThan(Graphical.Graphs.EdgeKey,Graphical.Graphs.EdgeKey)">
            <summary>
            Implementaton of IComparable interface
            </summary>
            <param name="k1"></param>
            <param name="k2"></param>
            <returns></returns>
        </member>
        <member name="M:Graphical.Graphs.EdgeKey.op_GreaterThan(Graphical.Graphs.EdgeKey,Graphical.Graphs.EdgeKey)">
            <summary>
            Implementation of IComparable interface
            </summary>
            <param name="k1"></param>
            <param name="k2"></param>
            <returns></returns>
        </member>
        <member name="M:Graphical.Graphs.EdgeKey.ToString">
            <summary>
            Override of ToString method.
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
