<Workspace Version="1.3.1.1736" X="-131.914687263666" Y="232.931738169567" zoom="0.798825425049555" ScaleFactor="1" Name="View.Plane" Description="Retrieves the plane of a given view" ID="d6dbde59-f3f7-47b5-9e1e-f30991f58ac1" Category="Clockwork.Revit.Views.View.Query">
  <NamespaceResolutionMap>
    <ClassMap partialName="Plane" resolvedName="Autodesk.DesignScript.Geometry.Plane" assemblyName="ProtoGeometry.dll" />
    <ClassMap partialName="View" resolvedName="Revit.Elements.Views.View" assemblyName="RevitNodes.dll" />
  </NamespaceResolutionMap>
  <Elements>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="cb979199-b156-42bd-9518-22cbb842016e" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="565.913407166084" y="169.01554025655" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="view" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="8ec2dc08-f0fd-4ab2-86d8-5778b6252a1e" type="Dynamo.Graph.Nodes.CustomNodes.Output" nickname="Output" x="952.913407166084" y="169.01554025655" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <PortInfo index="0" default="False" />
      <Symbol value="plane" />
    </Dynamo.Graph.Nodes.CustomNodes.Output>
    <PythonNodeModels.PythonNode guid="373dbd10-e66f-4085-be25-c8b9dc16217e" type="PythonNodeModels.PythonNode" nickname="Python Script" x="728.913407166084" y="169.01554025655" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false" inputcount="1">
      <PortInfo index="0" default="False" />
      <Script>import clr
clr.AddReference('RevitAPI')
from Autodesk.Revit.DB import *

clr.AddReference("RevitNodes")
import Revit
clr.ImportExtensions(Revit.GeometryConversion)

clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *

def ViewPlane(view):
	if hasattr(view, "ViewDirection") and hasattr(view, "Origin"):
		o = view.Origin
		n = view.ViewDirection
		if o and n: return Plane.ByOriginNormal(o.ToPoint(), n.ToVector())
		else: return None
	else: return None

views = UnwrapElement(IN[0])

if isinstance(IN[0], list): OUT = [ViewPlane(x) for x in views]
else: OUT = ViewPlane(views)</Script>
    </PythonNodeModels.PythonNode>
  </Elements>
  <Connectors>
    <Dynamo.Graph.Connectors.ConnectorModel start="cb979199-b156-42bd-9518-22cbb842016e" start_index="0" end="373dbd10-e66f-4085-be25-c8b9dc16217e" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="373dbd10-e66f-4085-be25-c8b9dc16217e" start_index="0" end="8ec2dc08-f0fd-4ab2-86d8-5778b6252a1e" end_index="0" portType="0" />
  </Connectors>
  <Notes />
  <Annotations />
  <Presets />
  <Cameras>
    <Camera Name="Hintergrundvorschau" eyeX="-17" eyeY="24" eyeZ="50" lookX="12" lookY="-13" lookZ="-58" upX="0" upY="1" upZ="0" />
  </Cameras>
</Workspace>