<Workspace Version="0.7.6.4145" X="31.798630097539" Y="275.381727778573" zoom="0.217681806770754" Name="Elements.position-rotation-mirrored" ID="02b266b9-9f16-4d1f-824a-2801ddee49bd" Description="This node get the position, rotation of elements and indicates if they are mirrored.&#xD;&#xA;&#xD;&#xA;Input is a list of elements, output are lists of data" Category="ABT">
  <NamespaceResolutionMap />
  <Elements>
    <Dynamo.Nodes.Symbol guid="06ef02a7-60c8-420f-a69b-ac84d2ce55a9" type="Dynamo.Nodes.Symbol" nickname="Input" x="0" y="173.074166666667" isVisible="true" isUpstreamVisible="true" lacing="Disabled">
      <Symbol value="List of elements" />
    </Dynamo.Nodes.Symbol>
    <DSIronPythonNode.PythonNode guid="6ec0570e-7fda-4996-a7c5-cebfd578532f" type="DSIronPythonNode.PythonNode" nickname="Vector to degrees" x="2102" y="333" isVisible="true" isUpstreamVisible="true" lacing="Disabled" inputcount="2">
      <Script>import clr
from math import *
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *
#The inputs to this node will be stored as a list in the IN variable.
dataEnteringNode = IN
X=IN[0]
Y=IN[1]
outlist = []
templist = []
templist2 = []
count = 0


for item in X:
	templist.append((acos(item)))


while count &lt; len(templist):
#for item in templist:
	if Y[count] &gt; 0:
		templist2.append(degrees(templist[count]))
	elif Y[count] == 0:
		templist2.append(degrees(templist[count]))
	elif Y[count] &lt; 0:
		templist2.append((degrees(templist[count])) + (2*(180-(degrees(templist[count])))))
	count = count + 1

for item in templist2:
	if item == 0:
		outlist.append(0)
	else:
		outlist.append(360 - item)

#while count &lt; len(X):
#
#	if X[count] &lt;0:
#		outlist.append(360 - degrees(acos(Y[count]*1)))
#	else:	
#		outlist.append(degrees(acos(Y[count]*1)))
#	count = count + 1

#Assign your output to the OUT variable
OUT = outlist</Script>
    </DSIronPythonNode.PythonNode>
    <DSIronPythonNode.PythonNode guid="d3546172-2b3f-4736-9bca-ff423e9d9264" type="DSIronPythonNode.PythonNode" nickname="list.Item.ToFloat" x="1665" y="304" isVisible="true" isUpstreamVisible="true" lacing="Disabled" inputcount="1">
      <Script>import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *
#The inputs to this node will be stored as a list in the IN variable.
dataEnteringNode = IN
outlist = []

for item in IN[0]:
	outlist.append(float(item))

#Assign your output to the OUT variable
OUT = outlist</Script>
    </DSIronPythonNode.PythonNode>
    <DSIronPythonNode.PythonNode guid="96582800-ee60-47a6-99f5-6022ef019ce5" type="DSIronPythonNode.PythonNode" nickname="list.Item.ToFloat" x="2102" y="82" isVisible="true" isUpstreamVisible="true" lacing="Disabled" inputcount="1">
      <Script>import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *
#The inputs to this node will be stored as a list in the IN variable.
dataEnteringNode = IN
outlist = []

for item in IN[0]:
	outlist.append(float(item))

#Assign your output to the OUT variable
OUT = outlist</Script>
    </DSIronPythonNode.PythonNode>
    <DSIronPythonNode.PythonNode guid="6d6d4352-bba1-4aae-9ad0-ad4036caca79" type="DSIronPythonNode.PythonNode" nickname="list.Item.ToFloat" x="2102" y="167" isVisible="true" isUpstreamVisible="true" lacing="Disabled" inputcount="1">
      <Script>import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *
#The inputs to this node will be stored as a list in the IN variable.
dataEnteringNode = IN
outlist = []

for item in IN[0]:
	outlist.append(float(item))

#Assign your output to the OUT variable
OUT = outlist</Script>
    </DSIronPythonNode.PythonNode>
    <DSIronPythonNode.PythonNode guid="c554ba32-71e1-4731-bb4c-85ccf80c5bb0" type="DSIronPythonNode.PythonNode" nickname="list.Item.ToFloat" x="2102" y="250" isVisible="true" isUpstreamVisible="true" lacing="Disabled" inputcount="1">
      <Script>import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *
#The inputs to this node will be stored as a list in the IN variable.
dataEnteringNode = IN
outlist = []

for item in IN[0]:
	outlist.append(float(item))

#Assign your output to the OUT variable
OUT = outlist</Script>
    </DSIronPythonNode.PythonNode>
    <DSIronPythonNode.PythonNode guid="000d0c86-5a86-426c-be3f-4e54927836c4" type="DSIronPythonNode.PythonNode" nickname="list.Item.ToFloat" x="1665" y="388" isVisible="true" isUpstreamVisible="true" lacing="Disabled" inputcount="1">
      <Script>import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *
#The inputs to this node will be stored as a list in the IN variable.
dataEnteringNode = IN
outlist = []

for item in IN[0]:
	outlist.append(float(item))

#Assign your output to the OUT variable
OUT = outlist</Script>
    </DSIronPythonNode.PythonNode>
    <Dynamo.Nodes.CodeBlockNodeModel guid="df69a428-9e18-498e-bdf4-a96033b829cd" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="transpose list and split output" x="1665" y="136.091666666667" isVisible="true" isUpstreamVisible="true" lacing="Disabled" CodeText="IN=List.Transpose(inputlist);&#xA;X=IN[0];&#xA;Y=IN[1];&#xA;Z=IN[2];" ShouldFocus="false" />
    <Dynamo.Nodes.CodeBlockNodeModel guid="501e6ee2-a4f0-4beb-b114-c5556125196d" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="transpose list and split output" x="1228" y="323.873333333333" isVisible="true" isUpstreamVisible="true" lacing="Disabled" CodeText="IN=List.Transpose(inputlist);&#xA;X=IN[0];&#xA;Y=IN[1];&#xA;Z=IN[2];" ShouldFocus="false" />
    <DSIronPythonNode.PythonNode guid="f3d3f4dc-673b-49ef-a9da-34343049aa11" type="DSIronPythonNode.PythonNode" nickname="XYZ splitter, cleans () and ," x="1228" y="131.873333333333" isVisible="true" isUpstreamVisible="true" lacing="Disabled" inputcount="1">
      <Script>import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *
#The inputs to this node will be stored as a list in the IN variable.
dataEnteringNode = IN
outlist = []
templist = []
templistA = []
for item in IN[0]:
	item = str(item)
	item = item.replace('(', '')
	item = item.replace(')', '')
	item = item.replace(',', '')
	templist.append(item)

for item in templist:
	outlist.append(item.split(" "))
	
for itemA in outlist:
	for itemB in itemA:
		itemB = float(itemB)

#Assign your output to the OUT variable
OUT = outlist</Script>
    </DSIronPythonNode.PythonNode>
    <DSIronPythonNode.PythonNode guid="c8dbc4f5-5d5a-4b5d-ae65-a617d1703ae3" type="DSIronPythonNode.PythonNode" nickname="XYZ splitter, cleans () and ," x="954" y="319.655" isVisible="true" isUpstreamVisible="true" lacing="Disabled" inputcount="1">
      <Script>import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *
#The inputs to this node will be stored as a list in the IN variable.
dataEnteringNode = IN
outlist = []
templist = []
templistA = []
for item in IN[0]:
	item = str(item)
	item = item.replace('(', '')
	item = item.replace(')', '')
	item = item.replace(',', '')
	templist.append(item)

for item in templist:
	outlist.append(item.split(" "))
	
for itemA in outlist:
	for itemB in itemA:
		itemB = float(itemB)

#Assign your output to the OUT variable
OUT = outlist</Script>
    </DSIronPythonNode.PythonNode>
    <Dynamo.Nodes.CodeBlockNodeModel guid="10084f37-6797-4b5c-94df-d2dd69e37a28" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="transpose list and split output" x="517" y="177.2925" isVisible="true" isUpstreamVisible="true" lacing="Disabled" CodeText="IN=List.Transpose(inputlist);&#xA;Elements=IN[0];&#xA;XYZposition=IN[1];&#xA;XYZvectorFacing=IN[2];&#xA;XYZvectorHand=IN[3];&#xA;Mirrored=IN[4];&#xA;Mirrored_FacingAxis=IN[5];&#xA;Mirrored_HandAxis=IN[6];" ShouldFocus="false" />
    <DSIronPythonNode.PythonNode guid="359f6f7d-f432-4896-ad67-36852d74fa7d" type="DSIronPythonNode.PythonNode" nickname="Element.dataExtractor&#xD;&#xA;" x="266" y="173.074166666667" isVisible="true" isUpstreamVisible="true" lacing="Disabled" inputcount="1">
      <Script>import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *

# Import RevitAPI
clr.AddReference('RevitAPI')
import Autodesk
#The inputs to this node will be stored as a list in the IN variable.
dataEnteringNode = IN

elements = []
for i in IN[0]:
	elements.append(UnwrapElement(i))
	

outlist = [] #export list
templist = [] #temporary list to group attributes by element
for i in elements:
	countA = 0
	while countA != 1:
		templist.append(i) #element
		templist.append(i.Location.Point) #XYZ position
		templist.append(i.FacingOrientation) #vector XYZ Facing
		templist.append(i.HandOrientation) #vector XYZ Hand
		templist.append(i.Mirrored)	#is mirrored?
		templist.append(i.FacingFlipped) #is mirrored over X axis?
		templist.append(i.HandFlipped) #is mirrored over Y axis?
		outlist.append(templist[:]) #append all attributes of element to outlist
		countA = 1 #up the count to kill while function
	del templist[:] #clear the templist

#Assign your output to the OUT variable
OUT = outlist #Export outlist with all atributes of elements grouped by nested list</Script>
    </DSIronPythonNode.PythonNode>
    <Dynamo.Nodes.Output guid="1a47fbb4-7c48-43ed-b305-fe96f458ca69" type="Dynamo.Nodes.Output" nickname="Output" x="2326" y="0" isVisible="true" isUpstreamVisible="true" lacing="Disabled">
      <Symbol value="Element" />
    </Dynamo.Nodes.Output>
    <Dynamo.Nodes.Output guid="fcb3f28f-8fdc-482e-b441-1bdd08675db9" type="Dynamo.Nodes.Output" nickname="Output" x="2326" y="83" isVisible="true" isUpstreamVisible="true" lacing="Disabled">
      <Symbol value="Position X" />
    </Dynamo.Nodes.Output>
    <Dynamo.Nodes.Output guid="f60ecde7-c08c-470b-8b71-e786dae90166" type="Dynamo.Nodes.Output" nickname="Output" x="2326" y="166" isVisible="true" isUpstreamVisible="true" lacing="Disabled">
      <Symbol value="Position Y" />
    </Dynamo.Nodes.Output>
    <Dynamo.Nodes.Output guid="b9d18fe8-0d59-4d17-a87f-6cd3ecd169b0" type="Dynamo.Nodes.Output" nickname="Output" x="2326" y="250" isVisible="true" isUpstreamVisible="true" lacing="Disabled">
      <Symbol value="Position Z" />
    </Dynamo.Nodes.Output>
    <Dynamo.Nodes.Output guid="e461680c-8b6a-411e-828f-bf8f72a95cc7" type="Dynamo.Nodes.Output" nickname="Output" x="2326" y="333" isVisible="true" isUpstreamVisible="true" lacing="Disabled">
      <Symbol value="Rotation" />
    </Dynamo.Nodes.Output>
    <Dynamo.Nodes.Output guid="2892b151-c734-4c87-a4a2-8ec42c0347e5" type="Dynamo.Nodes.Output" nickname="Output" x="2326" y="416" isVisible="true" isUpstreamVisible="true" lacing="Disabled">
      <Symbol value="Is.Mirrorred" />
    </Dynamo.Nodes.Output>
  </Elements>
  <Connectors>
    <Dynamo.Models.ConnectorModel start="06ef02a7-60c8-420f-a69b-ac84d2ce55a9" start_index="0" end="359f6f7d-f432-4896-ad67-36852d74fa7d" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="6ec0570e-7fda-4996-a7c5-cebfd578532f" start_index="0" end="e461680c-8b6a-411e-828f-bf8f72a95cc7" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="d3546172-2b3f-4736-9bca-ff423e9d9264" start_index="0" end="6ec0570e-7fda-4996-a7c5-cebfd578532f" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="96582800-ee60-47a6-99f5-6022ef019ce5" start_index="0" end="fcb3f28f-8fdc-482e-b441-1bdd08675db9" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="6d6d4352-bba1-4aae-9ad0-ad4036caca79" start_index="0" end="f60ecde7-c08c-470b-8b71-e786dae90166" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="c554ba32-71e1-4731-bb4c-85ccf80c5bb0" start_index="0" end="b9d18fe8-0d59-4d17-a87f-6cd3ecd169b0" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="000d0c86-5a86-426c-be3f-4e54927836c4" start_index="0" end="6ec0570e-7fda-4996-a7c5-cebfd578532f" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="df69a428-9e18-498e-bdf4-a96033b829cd" start_index="1" end="96582800-ee60-47a6-99f5-6022ef019ce5" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="df69a428-9e18-498e-bdf4-a96033b829cd" start_index="2" end="6d6d4352-bba1-4aae-9ad0-ad4036caca79" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="df69a428-9e18-498e-bdf4-a96033b829cd" start_index="3" end="c554ba32-71e1-4731-bb4c-85ccf80c5bb0" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="501e6ee2-a4f0-4beb-b114-c5556125196d" start_index="1" end="d3546172-2b3f-4736-9bca-ff423e9d9264" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="501e6ee2-a4f0-4beb-b114-c5556125196d" start_index="2" end="000d0c86-5a86-426c-be3f-4e54927836c4" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="f3d3f4dc-673b-49ef-a9da-34343049aa11" start_index="0" end="df69a428-9e18-498e-bdf4-a96033b829cd" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="c8dbc4f5-5d5a-4b5d-ae65-a617d1703ae3" start_index="0" end="501e6ee2-a4f0-4beb-b114-c5556125196d" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="10084f37-6797-4b5c-94df-d2dd69e37a28" start_index="1" end="1a47fbb4-7c48-43ed-b305-fe96f458ca69" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="10084f37-6797-4b5c-94df-d2dd69e37a28" start_index="2" end="f3d3f4dc-673b-49ef-a9da-34343049aa11" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="10084f37-6797-4b5c-94df-d2dd69e37a28" start_index="4" end="c8dbc4f5-5d5a-4b5d-ae65-a617d1703ae3" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="10084f37-6797-4b5c-94df-d2dd69e37a28" start_index="5" end="2892b151-c734-4c87-a4a2-8ec42c0347e5" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="359f6f7d-f432-4896-ad67-36852d74fa7d" start_index="0" end="10084f37-6797-4b5c-94df-d2dd69e37a28" end_index="0" portType="0" />
  </Connectors>
  <Notes>
    <Dynamo.Models.NoteModel text="Vector Hand&#xD;&#xA;" x="1371.27221340867" y="277.770415796585" />
    <Dynamo.Models.NoteModel text="Position&#xD;&#xA;" x="1838.29481356207" y="78.6908580782433" />
  </Notes>
</Workspace>