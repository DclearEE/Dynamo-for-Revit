<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Beaker</name>
    </assembly>
    <members>
        <member name="M:Revit.Collector.ByCategory(Revit.Elements.Category)">
            <summary>
            This node will collect all elements of given category while supplying extra outputs.
            </summary>
            <param name="category">The category to collect elements from.</param>
            <returns name="elements">Elements of given category.</returns>
            <returns name="names">Names of elements of given category.</returns>
            <returns name="count">Counts of elements of given category.</returns>
            <search>
            category, collector, beaker, bacon
            </search>
        </member>
        <member name="M:Revit.Collector.OfCurtainWalls">
            <summary>
            This node will collect all curtain walls in the active project.
            </summary>
            <returns name="curtainWalls">Returns all curtain walls in the current project.</returns>
            <search>
            curtainwall, collector, beaker, bacon
            </search>
        </member>
        <member name="M:Revit.Collector.OfStackedWalls">
            <summary>
            This node will collect all stacked walls in project along with individual members.
            </summary>
            <returns name="stackedWalls">The stacked walls in the document.</returns>
            <returns name="stackedWallMembers">The walls that make up the stacked walls.</returns>
            <search>
            stackedwalls, stacked, collector, beaker, bacon
            </search>
        </member>
        <member name="M:Revit.Collector.SheetTitleblock(Revit.Elements.Views.Sheet)">
            <summary>
            This node will grab the titleblock from the given sheet.
            </summary>
            <param name="viewSheet">The sheet to get titleblock from.</param>
            <returns name="titleblock">The sheet's titleblock.</returns>
            <search>
            sheet, sheets, titleblock, collector, beaker, bacon
            </search>
        </member>
        <member name="M:Revit.DocumentUtlities.GetFamilyDocument(Revit.Elements.FamilyType)">
            <summary>
            This node will get the document from a given family type
            </summary>
            <param name="familyType">The family type to get document from.</param>
            <returns name="familyDocument">The family document.</returns>
            <search>
            document, beaker, bacon
            </search>
        </member>
        <member name="M:Revit.DocumentUtlities.CloseDocument(Autodesk.Revit.DB.Document,System.Boolean)">
            <summary>
            This node will close a given document.
            </summary>
            <param name="document">The document to close</param>
            <param name="save">If you want to save.</param>
            <returns name="closeDocument">Result.</returns>
            <search>
            document, beaker, bacon
            </search>
        </member>
        <member name="M:Revit.ElementFilter.ByCategory(System.Collections.Generic.List{Revit.Elements.Element},Revit.Elements.Category)">
            <summary>
            This node will filter the input elements by given category.
            </summary>
            <param name="category">The category to filter by.</param>
            <param name="element">Elements to filter.</param>
            <returns name="elements">filtered elements</returns>
            <search>
            elementfilter, beaker, bacon
            </search>
        </member>
        <member name="M:Revit.ElementFilter.ByPhaseCreated(System.Collections.Generic.List{Revit.Elements.Element},Revit.Elements.Element)">
            <summary>
            This node will filter the input elements by given phase.
            </summary>
            <param name="phase">The phase to filter by.</param>
            <param name="element">Elements to filter.</param>
            <returns name="elements">filtered elements</returns>
            <search>
            elementfilter, beaker, bacon
            </search>
        </member>
        <member name="M:Revit.ElementFilter.ByPhaseDemolished(System.Collections.Generic.List{Revit.Elements.Element},Revit.Elements.Element)">
            <summary>
            This node will filter the input elements by given phase.
            </summary>
            <param name="phase">The phase to filter by.</param>
            <param name="element">Elements to filter.</param>
            <returns name="elements">filtered elements</returns>
            <search>
            elementfilter, beaker, bacon
            </search>
        </member>
        <member name="M:Revit.ElementFilter.ByName(System.Collections.Generic.List{Revit.Elements.Element},System.String)">
            <summary>
            This node will filter the input elements by given category.
            </summary>
            <param name="name">The name to filter by.</param>
            <param name="element">Elements to filter.</param>
            <returns name="elements">filtered elements</returns>
            <search>
            elementfilter, beaker, bacon
            </search>
        </member>
        <member name="M:Revit.ElementFilter.ByNameBeginsWith(System.Collections.Generic.List{Revit.Elements.Element},System.String)">
            <summary>
            This node will filter the input elements by given value.
            </summary>
            <param name="value">The string value to filter by.</param>
            <param name="element">Elements to filter by name begins with.</param>
            <returns name="elements">filtered elements</returns>
            <search>
            elementfilter, beaker, bacon
            </search>
        </member>
        <member name="M:Revit.ElementFilter.ByNameDoesNotBeginWith(System.Collections.Generic.List{Revit.Elements.Element},System.String)">
            <summary>
            This node will filter the input elements by given value.
            </summary>
            <param name="value">The string value to filter by.</param>
            <param name="element">Elements to filter by name does not begin with.</param>
            <returns name="elements">filtered elements</returns>
            <search>
            elementfilter, beaker, bacon
            </search>
        </member>
        <member name="M:Revit.ElementFilter.ByNameEndsWith(System.Collections.Generic.List{Revit.Elements.Element},System.String)">
            <summary>
            This node will filter the input elements by given value.
            </summary>
            <param name="value">The string value to filter by.</param>
            <param name="element">Elements to filter by name ends with.</param>
            <returns name="elements">filtered elements</returns>
            <search>
            elementfilter,beaker, bacon
            </search>
        </member>
        <member name="M:Revit.ElementFilter.ByNameDoesNotEndWith(System.Collections.Generic.List{Revit.Elements.Element},System.String)">
            <summary>
            This node will filter the input elements by given value.
            </summary>
            <param name="value">The string value to filter by.</param>
            <param name="element">Elements to filter by name does not end with.</param>
            <returns name="elements">filtered elements</returns>
            <search>
            elementfilter, beaker, bacon
            </search>
        </member>
        <member name="M:Revit.ElementFilter.ByNameContains(System.Collections.Generic.List{Revit.Elements.Element},System.String)">
            <summary>
            This node will filter the input elements by given value.
            </summary>
            <param name="value">The string value to filter by.</param>
            <param name="element">Elements to filter by name contains.</param>
            <returns name="elements">filtered elements</returns>
            <search>
            elementfilter, beaker, bacon
            </search>
        </member>
        <member name="M:Revit.ElementFilter.ByNameDoesNotContain(System.Collections.Generic.List{Revit.Elements.Element},System.String)">
            <summary>
            This node will filter the input elements by given value.
            </summary>
            <param name="value">The string value to filter by.</param>
            <param name="element">Elements to filter by name does not contain.</param>
            <returns name="elements">filtered elements</returns>
            <search>
            elementfilter, beaker, bacon
            </search>
        </member>
        <member name="M:Revit.ElementFilter.ByParameterValueBeginsWith(System.Collections.Generic.List{Revit.Elements.Element},System.String,System.String)">
            <summary>
            This node will filter the input elements by given value.
            </summary>
            <param name="parameterName">The parameter name to use for filter.</param>
            <param name="value">The value to filter by.</param>
            <param name="element">Elements to filter by parameter starting with.</param>
            <returns name="elements">filtered elements</returns>
            <search>
            elementfilter, beaker, bacon
            </search>
        </member>
        <member name="M:Revit.ElementFilter.ByParameterValueDoesNotBeginWith(System.Collections.Generic.List{Revit.Elements.Element},System.String,System.String)">
            <summary>
            This node will filter the input elements by given value.
            </summary>
            <param name="parameterName">The parameter name to use for filter.</param>
            <param name="value">The value to filter by.</param>
            <param name="element">Elements to filter by parameter not starting with.</param>
            <returns name="elements">filtered elements</returns>
            <search>
            elementfilter, beaker, bacon
            </search>
        </member>
        <member name="M:Revit.ElementFilter.ByParameterValueEndsWith(System.Collections.Generic.List{Revit.Elements.Element},System.String,System.String)">
            <summary>
            This node will filter the input elements by given value.
            </summary>
            <param name="parameterName">The parameter name to use for filter.</param>
            <param name="value">The value to filter by.</param>
            <param name="element">Elements to filter by parameter ending with.</param>
            <returns name="elements">filtered elements</returns>
            <search>
            elementfilter, beaker, bacon
            </search>
        </member>
        <member name="M:Revit.ElementFilter.ByParameterValueDoesNotEndWith(System.Collections.Generic.List{Revit.Elements.Element},System.String,System.String)">
            <summary>
            This node will filter the input elements by given value.
            </summary>
            <param name="parameterName">The parameter name to use for filter.</param>
            <param name="value">The value to filter by.</param>
            <param name="element">Elements to filter by parameter not ending with.</param>
            <returns name="elements">filtered elements</returns>
            <search>
            elementfilter, beaker, bacon
            </search>
        </member>
        <member name="M:Revit.ElementFilter.ByParameterValueContains(System.Collections.Generic.List{Revit.Elements.Element},System.String,System.String)">
            <summary>
            This node will filter the input elements by given value.
            </summary>
            <param name="parameterName">The parameter name to use for filter.</param>
            <param name="value">The value to filter by.</param>
            <param name="element">Elements to filter by parameter contains.</param>
            <returns name="elements">filtered elements</returns>
            <search>
            elementfilter, beaker, bacon
            </search>
        </member>
        <member name="M:Revit.ElementFilter.ByParameterValueDoesNotContain(System.Collections.Generic.List{Revit.Elements.Element},System.String,System.String)">
            <summary>
            This node will filter the input elements by given value.
            </summary>
            <param name="parameterName">The parameter name to use for filter.</param>
            <param name="value">The value to filter by.</param>
            <param name="element">Elements to filter by parameter does not contain.</param>
            <returns name="elements">filtered elements</returns>
            <search>
            elementfilter, beaker, bacon
            </search>
        </member>
        <member name="M:Revit.ElementFilter.ByParameterEquals(System.Collections.Generic.List{Revit.Elements.Element},System.String,System.String)">
            <summary>
            This node will filter the input elements by given value.
            </summary>
            <param name="parameterName">The parameter name to use for filter.</param>
            <param name="value">The value to filter by.</param>
            <param name="element">Elements to filter by parameter equals.</param>
            <returns name="elements">filtered elements</returns>
            <search>
            elementfilter, beaker, bacon
            </search>
        </member>
        <member name="M:Revit.ElementFilter.ByParameterDoesNotEqual(System.Collections.Generic.List{Revit.Elements.Element},System.String,System.String)">
            <summary>
            This node will filter the input elements by given value.
            </summary>
            <param name="parameterName">The parameter name to use for filter.</param>
            <param name="value">The value to filter by.</param>
            <param name="element">Elements to filter by parameter does not equal.</param>
            <returns name="elements">filtered elements</returns>
            <search>
            elementfilter, beaker, bacon
            </search>
        </member>
        <member name="M:Revit.ElementFilter.ByParameterIsGreaterThan(System.Collections.Generic.List{Revit.Elements.Element},System.String,System.Double)">
            <summary>
            This node will filter the input elements by the given numerical parameter and value. Will only work on numerical parameters.
            </summary>
            <param name="parameterName">The parameter name to use for filter. (Numerical parameter)</param>
            <param name="value">The value to filter by.</param>
            <param name="element">Elements to filter by parameter is greater than.</param>
            <returns name="elements">filtered elements</returns>
            <search>
            elementfilter, beaker, bacon
            </search>
        </member>
        <member name="M:Revit.ElementFilter.ByParameterIsGreaterThanOrEqualTo(System.Collections.Generic.List{Revit.Elements.Element},System.String,System.Double)">
            <summary>
            This node will filter the input elements by the given numerical parameter and value. Will only work on numerical parameters.
            </summary>
            <param name="parameterName">The parameter name to use for filter. (Numerical parameter)</param>
            <param name="value">The value to filter by.</param>
            <param name="element">Elements to filter by parameter is greater than or equal to.</param>
            <returns name="elements">filtered elements</returns>
            <search>
            elementfilter, beaker, bacon
            </search>
        </member>
        <member name="M:Revit.ElementFilter.ByParameterIsLessThan(System.Collections.Generic.List{Revit.Elements.Element},System.String,System.Double)">
            <summary>
            This node will filter the input elements by the given numerical parameter and value. Will only work on numerical parameters.
            </summary>
            <param name="parameterName">The parameter name to use for filter. (Numerical parameter)</param>
            <param name="value">The value to filter by.</param>
            <param name="element">Elements to filter by parameter is less than.</param>
            <returns name="elements">filtered elements</returns>
            <search>
            elementfilter, beaker, bacon
            </search>
        </member>
        <member name="M:Revit.ElementFilter.ByParameterIsLessThanOrEqualTo(System.Collections.Generic.List{Revit.Elements.Element},System.String,System.Double)">
            <summary>
            This node will filter the input elements by the given numerical parameter and value. Will only work on numerical parameters.
            </summary>
            <param name="parameterName">The parameter name to use for filter. (Numerical parameter)</param>
            <param name="value">The value to filter by.</param>
            <param name="element">Elements to filter by parameter is less than or equal to.</param>
            <returns name="elements">filtered elements</returns>
            <search>
            elementfilter, beaker, bacon
            </search>
        </member>
        <member name="M:Revit.ElementFilter.ByParameterIsBetweenTwoValues(System.Collections.Generic.List{Revit.Elements.Element},System.String,System.Double,System.Double)">
            <summary>
            This node will filter the input elements by the given numerical parameter and values. Will only work on numerical parameters.
            </summary>
            <param name="parameterName">The parameter name to use for filter. (Numerical parameter)</param>
            <param name="value1">The first value to filter by.</param>
            <param name="value2">The first value to filter by.</param>
            <param name="element">Elements to filter by parameter is between two values.</param>
            <returns name="elements">filtered elements</returns>
            <search>
            elementfilter, beaker, bacon
            </search>
        </member>
        <member name="M:Revit.Selection.AllWallsOfType(Revit.Elements.WallType)">
            <summary>
            This node will collect all walls of given type in the active project.
            </summary>
            <returns name="walls">Returns all walls of type in the current project.</returns>
            <search>
            walltype, selection, beaker, bacon
            </search>
        </member>
        <member name="M:Revit.Selection.AllFloorsOfType(Revit.Elements.FloorType)">
            <summary>
            This node will collect all floors of given type in the active project.
            </summary>
            <returns name="floors">Returns all floors of given type in the current project.</returns>
            <search>
            floortype, selection, beaker, bacon
            </search>
        </member>
        <member name="M:Revit.Selection.LevelByName(System.String)">
            <summary>
            This node will select a level given the name.
            </summary>
            <returns name="level">Returns the selected level.</returns>
            <search>
            level, selection, beaker, bacon
            </search>
        </member>
        <member name="M:Revit.Utilities.CopyElements(System.Collections.Generic.List{Revit.Elements.Element},Autodesk.DesignScript.Geometry.Point)">
            <summary>
            This node will copy given elements by given translation point.
            </summary>
            <param name="element">The elements to copy.</param>
            <param name="translation">Dynamo point to use as translation.</param>
            <returns name="element">The copied elements.</returns>
            <search>
            copy, move, translation, bacon
            </search>
        </member>
        <member name="M:Revit.Utilities.ElementTaggedStatus(Revit.Elements.Views.View,Revit.Elements.Category)">
            <summary>
            This node will grab tagged and untagged elements of the given category in the given view.
            </summary>
            <param name="view">The view to use.</param>
            <param name="category">The category to use.</param>
            <returns name="notTagged">The not tagged items.</returns>
            <returns name="tagged">The tagged items.</returns>       
            <search>
            sheet, sheets, titleblock, collector, beaker, bacon
            </search>
        </member>
        <member name="M:Revit.Utilities.BakeElements(System.Collections.Generic.List{Revit.Elements.Element},System.Boolean,System.Boolean)">
            <summary>
            This node will "bake" the given elements. Developed to break association of Dynamo created Revit elements with Dynamo.
            </summary>
            <param name="element">The elements to bake.</param>
            <param name="bakeElementsToggle">Toggle to enable it to run.</param>
            <param name="pinElementsToggle">Toggle to allow user to pin element upon baking.</param>
            <returns name="element">The baked elements.</returns>
            <returns name="wasRan?">Did the workflow run?</returns>
            <search>
            bake
            </search>
        </member>
    </members>
</doc>
