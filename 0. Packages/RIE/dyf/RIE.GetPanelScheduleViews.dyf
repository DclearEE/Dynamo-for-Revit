<Workspace Version="1.3.2.2480" X="141.6575" Y="343.11" zoom="1.1575" ScaleFactor="1" Name="RIE.GetPanelScheduleViews" Description="Gets Panel Schedules Views" ID="5d3bcbff-3266-465a-9fb3-786eb8598082" Category="RIE.Views">
  <NamespaceResolutionMap />
  <Elements>
    <PythonNodeModels.PythonNode guid="6de43a8f-388e-411f-a6ae-3846b5508053" type="PythonNodeModels.PythonNode" nickname="Python Script" x="250" y="0" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false" inputcount="0">
      <Script>#Copyright(c) 2015, Konrad Sobon
# @arch_laboratory, http://archi-lab.net

import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *

# Import DocumentManager and TransactionManager
clr.AddReference("RevitServices")
import RevitServices
from RevitServices.Persistence import DocumentManager
from RevitServices.Transactions import TransactionManager

# Import RevitAPI
clr.AddReference("RevitAPI")
import Autodesk
from Autodesk.Revit.DB import *

doc = DocumentManager.Instance.CurrentDBDocument
uiapp = DocumentManager.Instance.CurrentUIApplication
app = uiapp.Application

from System.Collections.Generic import *

# Import ToDSType(bool) extension method
clr.AddReference("RevitNodes")
import Revit
clr.ImportExtensions(Revit.Elements)

#The inputs to this node will be stored as a list in the IN variable.
dataEnteringNode = IN

#collect all views in the model
collector = FilteredElementCollector(doc)
views = collector.OfClass(View).ToElements()

#sort views into separate lists based on view type
areaPlans, ceilingPlans, columnSchedules = [], [], []
costReport, details, draftingViews = [], [], []
drawingSheets, elevations, engineetingPlans = [], [], []
floorPlans, internal, legends, loadReports = [], [], [], []
panelSchedules, pressureLossReports, renderings = [], [], []
reports, schedules, sections, threeD = [], [], [], []
undefined, walkthrough = [], []
for i in views:
	if not i.IsTemplate:
		if i.ViewType == ViewType.PanelSchedule:
			panelSchedules.append(i.ToDSType(True))
		else:
			continue

#Assign your output to the OUT variable
OUT = panelSchedules</Script>
    </PythonNodeModels.PythonNode>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="e83884c0-46d9-4d48-a0db-abcd5392b02f" type="Dynamo.Graph.Nodes.CustomNodes.Output" nickname="Output" x="351.613390928726" y="-0.863930885529157" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <PortInfo index="0" default="False" />
      <Symbol value="Panel Schedules" />
    </Dynamo.Graph.Nodes.CustomNodes.Output>
  </Elements>
  <Connectors>
    <Dynamo.Graph.Connectors.ConnectorModel start="6de43a8f-388e-411f-a6ae-3846b5508053" start_index="0" end="e83884c0-46d9-4d48-a0db-abcd5392b02f" end_index="0" portType="0" />
  </Connectors>
  <Notes />
  <Annotations />
  <Presets />
  <Cameras>
    <Camera Name="Background Preview" eyeX="-17" eyeY="24" eyeZ="50" lookX="12" lookY="-13" lookZ="-58" upX="0" upY="1" upZ="0" />
  </Cameras>
</Workspace>