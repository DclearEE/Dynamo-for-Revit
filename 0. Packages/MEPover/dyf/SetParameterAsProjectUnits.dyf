<Workspace Version="1.2.0.2831" X="0" Y="0" zoom="1" Name="SetParameterAsProjectUnits" Description="Sets the parameters by project unit inputs, no need to convert to Revit internal units first." ID="94035692-672e-44c3-ad63-0f0453d762fc" Category="MEPover.Revit.Parameters">
  <NamespaceResolutionMap />
  <Elements>
    <PythonNodeModels.PythonNode guid="741a190c-5b48-463f-9873-549eeaa9985b" type="PythonNodeModels.PythonNode" nickname="Python Script" x="321" y="240" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false" inputcount="3">
      <PortInfo index="0" default="False" />
      <PortInfo index="1" default="False" />
      <PortInfo index="2" default="False" />
      <Script>import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *
clr.AddReference('RevitAPI')
from Autodesk.Revit.DB import *

clr.AddReference("RevitServices")
import RevitServices
from RevitServices.Persistence import DocumentManager
from RevitServices.Transactions import TransactionManager
doc = DocumentManager.Instance.CurrentDBDocument
#The inputs to this node will be stored as a list in the IN variables.
toggle = 0
if isinstance(IN[0], list):
	element = UnwrapElement(IN[0])
else:
	element = [UnwrapElement(IN[0])]
name = IN[1]
if isinstance(IN[2], list):
	values = IN[2]
	toggle = 1
else:
	values = IN[2]
parameters = []
listout = []


def checkParameter(param):
	for p in param:
		internal = p.Definition
		if internal.BuiltInParameter != BuiltInParameter.INVALID:
			return p
	return param[0]

for e in element:
	param = e.GetParameters(name)
	if len(param) == 0:
		parameters.append(None)
	else:
		p = checkParameter(param)
		parameters.append(p)

if toggle == 1:
	TransactionManager.Instance.EnsureInTransaction(doc)
	for i,p in enumerate(parameters):
		if p is None:
			listout.append(None)
		elif p.StorageType == StorageType.Double:
			ProjectUnits = p.DisplayUnitType
			newval = UnitUtils.ConvertToInternalUnits(values[i],ProjectUnits)
			p.Set(newval)
			listout.append(element[i])
		elif p.StorageType == StorageType.ElementId:
			newval = UnwrapElement(values[i])
			p.Set(newval.Id)
			listout.append(element[i])
		else:
			p.Set(values[i])
			listout.append(element[i])
	TransactionManager.Instance.TransactionTaskDone()
else:
	TransactionManager.Instance.EnsureInTransaction(doc)
	for i,p in enumerate(parameters):
		if p is None:
			listout.append(None)
		elif p.StorageType == StorageType.Double:
			ProjectUnits = p.DisplayUnitType
			newval = UnitUtils.ConvertToInternalUnits(values,ProjectUnits)
			p.Set(newval)
			listout.append(element[i])
		elif p.StorageType == StorageType.ElementId:
			newval = UnwrapElement(values)
			p.Set(newval.Id)
			listout.append(element[i])
		else:
			p.Set(values)
			listout.append(element[i])
	TransactionManager.Instance.TransactionTaskDone()

#Assign your output to the OUT variable.
OUT = listout</Script>
    </PythonNodeModels.PythonNode>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="45fca9b7-7250-465f-b47c-3bf7d230114e" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="106" y="216" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="Elements" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="cc7af2c1-5ee8-4568-8b2c-6fd07326bc5b" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="26" y="296" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="ParameterName : string" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="691469f7-6937-4c84-a5f2-0624fdb3e440" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="100" y="390" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="Values" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="f8bfb4f8-da27-4766-89a9-54f38d9013a6" type="Dynamo.Graph.Nodes.CustomNodes.Output" nickname="Output" x="511" y="212" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <PortInfo index="0" default="False" />
      <Symbol value="Elements" />
    </Dynamo.Graph.Nodes.CustomNodes.Output>
  </Elements>
  <Connectors>
    <Dynamo.Graph.Connectors.ConnectorModel start="741a190c-5b48-463f-9873-549eeaa9985b" start_index="0" end="f8bfb4f8-da27-4766-89a9-54f38d9013a6" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="45fca9b7-7250-465f-b47c-3bf7d230114e" start_index="0" end="741a190c-5b48-463f-9873-549eeaa9985b" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="cc7af2c1-5ee8-4568-8b2c-6fd07326bc5b" start_index="0" end="741a190c-5b48-463f-9873-549eeaa9985b" end_index="1" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="691469f7-6937-4c84-a5f2-0624fdb3e440" start_index="0" end="741a190c-5b48-463f-9873-549eeaa9985b" end_index="2" portType="0" />
  </Connectors>
  <Notes />
  <Annotations />
  <Presets />
  <Cameras>
    <Camera Name="Background Preview" eyeX="-17" eyeY="24" eyeZ="50" lookX="12" lookY="-13" lookZ="-58" upX="0" upY="1" upZ="0" />
  </Cameras>
</Workspace>