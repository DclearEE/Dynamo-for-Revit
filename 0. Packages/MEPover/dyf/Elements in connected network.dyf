<Workspace Version="1.3.3.4111" X="0" Y="0" zoom="1" ScaleFactor="1" Name="Elements in connected network" Description="Returns all elements that are physically connected to the input element" ID="c9510c48-91da-4f4c-970d-c1ed4ded835c" Category="MEPover.Revit.Elements">
  <NamespaceResolutionMap />
  <Elements>
    <PythonNodeModels.PythonNode guid="0def1a4e-14ee-4035-b4ea-38e505387d64" type="PythonNodeModels.PythonNode" nickname="Python Script" x="289" y="265" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false" inputcount="1">
      <PortInfo index="0" default="False" />
      <Script>import clr
import math

import sys
pyt_path = r'C:\Program Files (x86)\IronPython 2.7\Lib'
sys.path.append(pyt_path)
import System

clr.AddReference("RevitServices")
import RevitServices
from RevitServices.Persistence import DocumentManager
from RevitServices.Transactions import TransactionManager
doc = DocumentManager.Instance.CurrentDBDocument

clr.AddReference("RevitAPI")
import Autodesk
from Autodesk.Revit.DB import *

clr.AddReference("RevitNodes")
import Revit
clr.ImportExtensions(Revit.Elements)
clr.ImportExtensions(Revit.GeometryConversion)

import collections
#The inputs to this node will be stored as a list in the IN variables.
if isinstance(IN[0],list):
	element = UnwrapElement(IN[0])
	toggle = 0
else:
	element = [UnwrapElement(IN[0])]
	toggle = 1
		
def nextElements(elem):
	listout = []
	try:
		connectors = elem.ConnectorManager.Connectors
	except:
		connectors = elem.MEPModel.ConnectorManager.Connectors
	for conn in connectors:
		for c in conn.AllRefs:
			if c.Owner.Id.Equals(elem.Id):
				continue
			elif c.Owner.GetType() == Mechanical.MechanicalSystem:
				continue
			else:
				newelem = c.Owner
			listout.append(newelem)
	return listout

def systemcheck(elem):
	if elem.GetType() == Mechanical.MechanicalSystem or elem.GetType() == Plumbing.PipingSystem:
		return True
	else:
		return False
	
def collector(elem):
	cont = 0
	elements = nextElements(elem)
	for x in elements:
		if x.Id in lookup:
			cont += 1
		else:
			item = doc.GetElement(x.Id)
			if systemcheck(item):
				return elem
			else:
				lookup[x.Id] = item
				collector(x)
	if cont == len(elements):
		return elem
		

listout = []
for x in element:
	lookup = collections.OrderedDict()
	collector(x)
	listout.append(lookup.Values)

#Assign your output to the OUT variable.
if toggle:
	OUT = lookup.Values
else:
	OUT = listout</Script>
    </PythonNodeModels.PythonNode>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="b52f5cd0-e2be-47f2-a446-04bc7e578861" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="89" y="293" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="Element" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="00b5e047-c67f-43b1-aa0f-e78e91cfcda7" type="Dynamo.Graph.Nodes.CustomNodes.Output" nickname="Output" x="552" y="259" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <PortInfo index="0" default="False" />
      <Symbol value="network" />
    </Dynamo.Graph.Nodes.CustomNodes.Output>
  </Elements>
  <Connectors>
    <Dynamo.Graph.Connectors.ConnectorModel start="0def1a4e-14ee-4035-b4ea-38e505387d64" start_index="0" end="00b5e047-c67f-43b1-aa0f-e78e91cfcda7" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="b52f5cd0-e2be-47f2-a446-04bc7e578861" start_index="0" end="0def1a4e-14ee-4035-b4ea-38e505387d64" end_index="0" portType="0" />
  </Connectors>
  <Notes />
  <Annotations />
  <Presets />
  <Cameras>
    <Camera Name="Background Preview" eyeX="-17" eyeY="24" eyeZ="50" lookX="12" lookY="-13" lookZ="-58" upX="0" upY="1" upZ="0" />
  </Cameras>
</Workspace>