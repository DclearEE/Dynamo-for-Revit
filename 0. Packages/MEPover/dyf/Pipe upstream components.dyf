<Workspace Version="1.3.2.2480" X="45" Y="-94" zoom="1" ScaleFactor="1" Name="Pipe upstream components" Description="This node will try to return the connected elements in the upstream network. It will stop once it encounters an element twice or encounters a different system classification or cannot find a connector with an opposing direction." ID="bfafaa43-e3ca-49b2-8d66-308b2bd6c8d3" Category="MEPover.Revit.Systems">
  <NamespaceResolutionMap />
  <Elements>
    <PythonNodeModels.PythonNode guid="7f7d0543-3793-47c3-b8f4-5d6ba6653f7e" type="PythonNodeModels.PythonNode" nickname="Python Script" x="343" y="342" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false" inputcount="1">
      <PortInfo index="0" default="False" />
      <Script>import clr
import math

clr.AddReference("RevitServices")
import RevitServices
from RevitServices.Persistence import DocumentManager
from RevitServices.Transactions import TransactionManager
doc = DocumentManager.Instance.CurrentDBDocument

clr.AddReference("RevitAPI")
import Autodesk
from Autodesk.Revit.DB import *

clr.AddReference("RevitNodes")
import Revit
clr.ImportExtensions(Revit.Elements)
clr.ImportExtensions(Revit.GeometryConversion)
#The inputs to this node will be stored as a list in the IN variables.
if isinstance(IN[0], list):
	elements = UnwrapElement(IN[0])
else:
	elements = [UnwrapElement(IN[0])]
	
def getSize(x):
	try:
		conns = x.ConnectorManager.Connectors
	except:
		conns = x.MEPModel.ConnectorManager.Connectors
	maxsize = 0
	for c in conns:
		if c.Shape != ConnectorProfileType.Round:
			continue
		else:
			startsize = c.Radius * 2
		if startsize &gt; maxsize:
			maxsize = startsize
	return maxsize
	
factor = 99999

def nextElement(elem,sys):
	sysname = next.get_Parameter(BuiltInParameter.RBS_SYSTEM_CLASSIFICATION_PARAM).AsString()
	for s in sysname.split(","):
		if s in sys.split(","):
			break
	else:
		return 4
	if "Return" in sysname or "Sanitary" in sysname:
		direction = FlowDirectionType.In
	else:
		direction = FlowDirectionType.Out
	try:
		connectors = elem.ConnectorManager.Connectors
		for conn in connectors:
			if conn.Domain != Domain.DomainPiping:
				continue
			elif conn.Direction == direction:
				continue
			else:
				endconn = conn
		for c in endconn.AllRefs:
			if c.Owner.Id.Equals(elem.Id):
				continue
			elif c.Owner.GetType() == Mechanical.MechanicalSystem or c.Owner.GetType() == Plumbing.PipingSystem:
				return 0
			else:
				newelem = c.Owner
		return newelem
	except AttributeError:
		connectors = elem.MEPModel.ConnectorManager.Connectors
		if connectors.Size == 1:
			for conn in connectors:
				if conn.Domain != Domain.DomainPiping:
					continue
				endconn = conn
			if endconn.AllRefs.Size == 1:
				for c in endconn.AllRefs:
					if c.Owner.GetType() == Mechanical.MechanicalSystem or c.Owner.GetType() == Plumbing.PipingSystem:
						return 1
			for c in endconn.AllRefs:
				if c.Owner.Id.Equals(elem.Id):
					continue
				elif c.Owner.GetType() == Mechanical.MechanicalSystem or c.Owner.GetType() == Plumbing.PipingSystem:
					continue
				else:
					newelem = c.Owner
			return newelem
		elif connectors.Size == 2:
			for conn in connectors:
				if conn.Domain != Domain.DomainPiping:
					continue
				if conn.Direction == direction:
					continue
				else:
					endconn = conn
			if endconn.AllRefs.Size == 1:
				for c in endconn.AllRefs:
					if c.Owner.GetType() == Mechanical.MechanicalSystem or c.Owner.GetType() == Plumbing.PipingSystem:
						return 2
			for c in endconn.AllRefs:
				if c.Owner.Id.Equals(elem.Id):
					continue
				elif c.Owner.GetType() == Mechanical.MechanicalSystem or c.Owner.GetType() == Plumbing.PipingSystem:
					continue
				else:
					newelem = c.Owner
			return newelem
		else:
			for conn in connectors:
				if conn.Domain != Domain.DomainPiping:
					continue
				if conn.Direction != direction:
					endconn = conn
			if endconn.AllRefs.Size == 1:
				for c in endconn.AllRefs:
					if c.Owner.GetType() == Mechanical.MechanicalSystem or c.Owner.GetType() == Plumbing.PipingSystem:
						return 3
			for c in endconn.AllRefs:
				if c.Owner.Id.Equals(elem.Id):
					continue
				elif c.Owner.GetType() == Mechanical.MechanicalSystem or c.Owner.GetType() == Plumbing.PipingSystem:
					continue
				else:
					newelem = c.Owner
			return newelem

result = []
endlist = []
for j,x in enumerate(elements):
	listout = []
	ids = []
	sysclass = x.get_Parameter(BuiltInParameter.RBS_SYSTEM_CLASSIFICATION_PARAM).AsString()
	startsize = getSize(x)
	next = x
	i = 0
	while True:
		if i &gt; 1000:
			result.append(next.Id.ToString() + ": end of loop")
			break
		try:
			next = nextElement(next,sysclass)
			i += 1
		except Exception as e:
			result.append(next.Id.ToString() + ": probably a direction error")
			break		
		if isinstance(next, int):
			result.append(next.ToString() + ": open end or different system classification")
			break
		if next.Id in ids:
			result.append(next.Id.ToString() + ": double element")
			break
		i += 1
		nextsize = getSize(next)
		if nextsize &gt; startsize * factor:
			result.append(next.Id.ToString() + ": size end")
			break
		ids.append(next.Id)
		listout.append(next)
	endlist.append(listout)


#Assign your output to the OUT variable.
if len(endlist) == 1:
	OUT = listout, result
else:
	OUT = endlist, result</Script>
    </PythonNodeModels.PythonNode>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="dcd85cc6-3bee-4169-a856-3ce0675784e8" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="126" y="314" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="Element" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="611bbcaf-0736-4006-bf97-bf70cff61bce" type="Dynamo.Graph.Nodes.CustomNodes.Output" nickname="Output" x="667" y="334" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <PortInfo index="0" default="False" />
      <Symbol value="Elements" />
    </Dynamo.Graph.Nodes.CustomNodes.Output>
    <Dynamo.Graph.Nodes.CodeBlockNodeModel guid="eb546289-6691-481c-ab2f-0a012ba7673a" type="Dynamo.Graph.Nodes.CodeBlockNodeModel" nickname="Code Block" x="532" y="335" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false" CodeText="x[0];" ShouldFocus="false">
      <PortInfo index="0" default="False" />
    </Dynamo.Graph.Nodes.CodeBlockNodeModel>
  </Elements>
  <Connectors>
    <Dynamo.Graph.Connectors.ConnectorModel start="7f7d0543-3793-47c3-b8f4-5d6ba6653f7e" start_index="0" end="eb546289-6691-481c-ab2f-0a012ba7673a" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="dcd85cc6-3bee-4169-a856-3ce0675784e8" start_index="0" end="7f7d0543-3793-47c3-b8f4-5d6ba6653f7e" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="eb546289-6691-481c-ab2f-0a012ba7673a" start_index="0" end="611bbcaf-0736-4006-bf97-bf70cff61bce" end_index="0" portType="0" />
  </Connectors>
  <Notes />
  <Annotations />
  <Presets />
  <Cameras>
    <Camera Name="Background Preview" eyeX="-17" eyeY="24" eyeZ="50" lookX="12" lookY="-13" lookZ="-58" upX="0" upY="1" upZ="0" />
  </Cameras>
</Workspace>