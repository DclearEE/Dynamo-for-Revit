<Workspace Version="1.3.1.1736" X="34" Y="-21" zoom="1" ScaleFactor="1" Name="SetParameterSetValueString" Description="Sets the parameters by strings. Useful for setting numerical values that are affected by Revit's internal  unit conversion. Does not work for parameters that are stored as elementId" ID="ab743892-f5d8-4a05-9c11-4faa1550b8c7" Category="MEPover.Revit.Parameters">
  <NamespaceResolutionMap />
  <Elements>
    <PythonNodeModels.PythonNode guid="ddc86a9f-c9e0-40cf-a812-863cbbb97ecb" type="PythonNodeModels.PythonNode" nickname="Python Script" x="265" y="178" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false" inputcount="3">
      <PortInfo index="0" default="False" />
      <PortInfo index="1" default="False" />
      <PortInfo index="2" default="False" />
      <Script>import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *
clr.AddReference('RevitAPI')
from Autodesk.Revit.DB import *

clr.AddReference("RevitServices")
import RevitServices
from RevitServices.Persistence import DocumentManager
from RevitServices.Transactions import TransactionManager
doc = DocumentManager.Instance.CurrentDBDocument
#The inputs to this node will be stored as a list in the IN variables.
toggle = 0
if isinstance(IN[0], list):
	element = UnwrapElement(IN[0])
else:
	element = [UnwrapElement(IN[0])]
name = IN[1]
if isinstance(IN[2], list):
	values = IN[2]
	toggle = 1
else:
	values = [IN[2]]
parameters = []
listout = []


def checkParameter(param):
	for p in param:
		internal = p.Definition
		if internal.BuiltInParameter != BuiltInParameter.INVALID:
			return p
	return param[0]

for e in element:
	param = e.GetParameters(name)
	if len(param) == 0:
		parameters.append(None)
	else:
		p = checkParameter(param)
		if p.StorageType == StorageType.ElementId:
			parameters.append(None)
		else:
			parameters.append(p)

if toggle == 1:
	TransactionManager.Instance.EnsureInTransaction(doc)
	for i,p in enumerate(parameters):
		if p is None:
			listout.append(None)
		else:
			p.SetValueString(values[i])
			listout.append(element[i])
	TransactionManager.Instance.TransactionTaskDone()
else:
	TransactionManager.Instance.EnsureInTransaction(doc)
	for i,p in enumerate(parameters):
		if p is None:
			listout.append(None)
		else:
			try:
				p.SetValueString(values)
				listout.append(element[i])
			except:
				p.SetValueString(values[0])
				listout.append(element[i])
	TransactionManager.Instance.TransactionTaskDone()

#Assign your output to the OUT variable.
OUT = listout</Script>
    </PythonNodeModels.PythonNode>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="ed3f1346-2ade-42e8-97d3-7e4a5510583d" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="84" y="158" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="Elements" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="880721a8-9d57-4f8a-9fbd-eb84b49d0489" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="-13" y="219" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="ParameterName : string" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="4cf10b5a-12b3-47cf-8725-87cbbfbeba0f" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="33" y="297" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="Values : string[]..[]" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="20ef30d9-9980-4f92-97a6-54c424716575" type="Dynamo.Graph.Nodes.CustomNodes.Output" nickname="Output" x="483" y="176" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <PortInfo index="0" default="False" />
      <Symbol value="Elements" />
    </Dynamo.Graph.Nodes.CustomNodes.Output>
  </Elements>
  <Connectors>
    <Dynamo.Graph.Connectors.ConnectorModel start="ddc86a9f-c9e0-40cf-a812-863cbbb97ecb" start_index="0" end="20ef30d9-9980-4f92-97a6-54c424716575" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="ed3f1346-2ade-42e8-97d3-7e4a5510583d" start_index="0" end="ddc86a9f-c9e0-40cf-a812-863cbbb97ecb" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="880721a8-9d57-4f8a-9fbd-eb84b49d0489" start_index="0" end="ddc86a9f-c9e0-40cf-a812-863cbbb97ecb" end_index="1" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="4cf10b5a-12b3-47cf-8725-87cbbfbeba0f" start_index="0" end="ddc86a9f-c9e0-40cf-a812-863cbbb97ecb" end_index="2" portType="0" />
  </Connectors>
  <Notes />
  <Annotations />
  <Presets />
  <Cameras>
    <Camera Name="Background Preview" eyeX="-17" eyeY="24" eyeZ="50" lookX="12" lookY="-13" lookZ="-58" upX="0" upY="1" upZ="0" />
  </Cameras>
</Workspace>