<Workspace Version="1.3.2.2480" X="0" Y="0" zoom="1" ScaleFactor="1" Name="PanelScheduleView.ElectricalCircuits" Description="Returns the circuits that are listed in the panelschedule, this includes spare circuits." ID="db29e03f-8eac-46c6-94fe-b2bb3084e49a" Category="MEPover.Revit.PanelSchedule">
  <NamespaceResolutionMap />
  <Elements>
    <PythonNodeModels.PythonNode guid="b0a893d7-3a69-4eed-b317-d789b03ee968" type="PythonNodeModels.PythonNode" nickname="Python Script" x="250" y="307" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="true" inputcount="1">
      <PortInfo index="0" default="False" />
      <Script>import clr

clr.AddReference("RevitServices")
import RevitServices
from RevitServices.Persistence import DocumentManager
from RevitServices.Transactions import TransactionManager
doc = DocumentManager.Instance.CurrentDBDocument

clr.AddReference("RevitAPI")
import Autodesk
from Autodesk.Revit.DB import *

clr.AddReference("RevitNodes")
import Revit
clr.ImportExtensions(Revit.Elements)
clr.ImportExtensions(Revit.GeometryConversion)

#Many thanks to Konrad K Sobon for his awesome ProcessList function!
def Unwrap(item):
	return UnwrapElement(item)

def ProcessList(_func, _list):
    return map( lambda x: ProcessList(_func, x) if type(x)==list else _func(x), _list )

if isinstance(IN[0], list):
	panelschedule = ProcessList(Unwrap, IN[0])
else:
	panelschedule = [Unwrap(IN[0])]
	
	
def GetNumber(panelschedule):
	i = 0
	circuits = []
	foundcircuit = False
	while True:
		if panelschedule.GetTableData().GetNumberOfCircuitRows() &lt; i:
			break
		circuit = panelschedule.GetCircuitByCell(i,0)
		if circuit == None and foundcircuit == True:
			break
		if circuit == None and foundcircuit == False:
			i += 1
			continue
		if circuit.GetType() == Electrical.ElectricalSystem and foundcircuit == False:
			foundcircuit = True
			circuits.append(circuit.ToDSType(True))
			i += 1
			continue
		if circuit.GetType() != Electrical.ElectricalSystem:
			break
		circuits.append(circuit.ToDSType(True))
		i += 1
		if i &gt; 1000:
			break
	return circuits



OUT = ProcessList(GetNumber, panelschedule)</Script>
    </PythonNodeModels.PythonNode>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="88196ca0-b06c-4753-8a21-e805e1a5b1a6" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="111" y="214" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="PanelScheduleView" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="cf79e5c0-fe8d-4965-b46d-a8dfa6a4f341" type="Dynamo.Graph.Nodes.CustomNodes.Output" nickname="Output" x="422" y="301" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <PortInfo index="0" default="False" />
      <Symbol value="Circuits" />
    </Dynamo.Graph.Nodes.CustomNodes.Output>
  </Elements>
  <Connectors>
    <Dynamo.Graph.Connectors.ConnectorModel start="b0a893d7-3a69-4eed-b317-d789b03ee968" start_index="0" end="cf79e5c0-fe8d-4965-b46d-a8dfa6a4f341" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="88196ca0-b06c-4753-8a21-e805e1a5b1a6" start_index="0" end="b0a893d7-3a69-4eed-b317-d789b03ee968" end_index="0" portType="0" />
  </Connectors>
  <Notes />
  <Annotations />
  <Presets />
  <Cameras>
    <Camera Name="Background Preview" eyeX="-17" eyeY="24" eyeZ="50" lookX="12" lookY="-13" lookZ="-58" upX="0" upY="1" upZ="0" />
  </Cameras>
</Workspace>