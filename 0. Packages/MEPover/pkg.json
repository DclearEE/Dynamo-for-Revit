{"license":"","file_hash":null,"name":"MEPover","version":"2018.4.2","description":"A package that focuses on adding some nodes for MEP, but also some nodes useful for all disciplines.","group":"MEPover","keywords":["mep"],"dependencies":[],"contents":"All categories in document - Retrieves all categories from the current document and splits them up in Model, Annotation, Analytic and Internal Categories, All elements at Level - The same as the out of the box node, but this one also returns more type of families (e.g. System families), CableTray.ByLines - Creates CableTray by Lines, CableTrayType, Level, Width and Height, Collector.FilterStringBeginsWith - Returns the most common elements (host objects and family instances) by supplying a parameter and the value to search for. Of course the parameter needs to be of type 'string' to work., Collector.FilterStringContains - Returns the most common elements (host objects and family instances) by supplying a parameter and the value to search for. Of course the parameter needs to be of type 'string' to work., Collector.FilterStringEndsWith - Returns the most common elements (host objects and family instances) by supplying a parameter and the value to search for. Of course the parameter needs to be of type 'string' to work., Collector.FilterStringEquals - Returns the most common elements (host objects and family instances) by supplying a parameter and the value to search for. Of course the parameter needs to be of type 'string' to work., Conduit.ByLines - Creates conduits by Line, ConduitType, Level and Diameter, Connector.AddToSystem - Adds a connector to a Mechanical or Piping system, Connector.ConnectedConnectors - Returns the connector from the element that is connected to this connector , Connector.ConnectedElements - Returns the elements that are connected to this connector (does not return the host element), Connector.ConnectorSystemType - Returns the Connector System Type of the connector, Connector.ConnectorType - Returns the ConnectorType of a connector, Connector.ConnectTo - Connects a connector to another connector. Returns True if connection succeeded, Connector.Description - Returns the description of the connector, Connector.Direction - Returns the direction of the CoordinateSystem of the Connector, Connector.DisconnectFrom - Disconnects a connector from another connector. Returns True if succeeded, Connector.FlowDirection - Returns the direction of the flow on the connector, Connector.HostElement - Returns the element that hosts the connector, Connector.IsConnected - Returns a boolean indicating whether the connector is connected to a connector on different element, Connector.IsPrimary - Returns a boolean indicating whether the connector is the primary connector, Connector.LinkedConnector - Returns the linked connector, Connector.Location - Returns the location of a connector, Connector.Shape - Returns the shape of the connector, Connector.SizeRectangular - Returns the Height and the Width of the connector (in feet), Connector.SizeRound - Returns the Height and the Width of the connector (in feet), Connector.System - Returns the system that's connected to the connector, Connector.SystemType - Returns the System Type of the connected system, Copy element to location - This node will copy level-hosted elements to the given locations and rehost to the nearest level.(does not work for curve based elements) , Duct or pipe systems all elements - Returns all the elements in the provided systems, Duct upstream components by category - This node will try to return the connected elements in the upstream network. It will stop once it encounters an element twice or encounters a different system classification or cannot find a connector with an opposing direction. The output can be filtered by input Categories, Duct upstream components - This node will try to return the connected elements in the upstream network. It will stop once it encounters an element twice or encounters a different system classification or cannot find a connector with an opposing direction., DuctRectangular.ByLines - Create ducts by Lines, DuctType, MechanicalFittingType, Level, Width and Height, DuctRound.ByLines - Create round Ducts by Lines, DuctType, SystemType, Level and Diameter, Elbow.ByMEPCurves - Takes in a list of MEPCurves (pipe, duct, cable tray, conduit)  and will attempt to create elbows where possible. A margin can be entered for max distance between connectors, ElectricalCircuit Get Panels and Elements - Returns the Panels and Elements belonging to the given electrical circuits, ElectricalFitting connector count - Returns the number of connectors on the cable tray or conduit fitting, ElectricalSystem.AddToCircuit - Adds elements to circuit if possible, ElectricalSystem.AddToPanel - Adds the circuits to the panel, ElectricalSystem.DisconnectPanel - Disconnects the panel the circuit, ElectricalSystem.RemoveFromCircuit - Removes the elements from the circuit, Element.AddInsulation - Adds insulation to pipe or duct networks, Element.ConnectInto - Connects terminal elements into pipes or ducts. An optional margin value can be given to define the curve offset length from the terminal if applicable., Element.Connectors - Returns every connector on an element (also return connectors of a System), Element.ConnectorSystemType - Returns the MEP System Type of the connectors of the element, Element.Domain - Returns the domain of connectors on the element i.e. (domainHvac, domainPiping etc.), Element.ElectricalCircuit - Returns the electrical circuit of the element, Element.GetInsulation - Will return the insulation of a pipe or duct, Element.System - Returns the mechanical or plumbing system of the element, Element.SystemType - Returns the mechanical or plumbing System Type, Elements change Level - Change the elements to the selected level without moving the elements. Only works for non-hosted (level-hosted) MEP elements., Elements in connected network - Returns all elements that are physically connected to the input element, Elements in view by category - Returns all the elements in the selected view(s) by the selected categor(y)(ies), Family types of family - Returns every family type of the given Family, FamilyManager.CreateNewType - Creates a new family type with the given name (only works in Family Editor), FamilyManager.RemoveParameter - Searches every family parameter for the given (sub)string and removes that parameter (only works in Family Editor), FamilyManager.RenameFamilyType - Searches every family type for the given (sub)string and replace that the (sub)string with the replace string (only works in Family Editor), FamilyManager.RenameParameter - Searches every family parameter for the given (sub)string and replaces that the (sub)string with the replace string, FlexCurve.ByElements - Creates a flex duct or flex pipe between 2 elements. Input IN[2] expects a FlexDuctType or FlexPipeType, FlexCurve.ByPoints - Create a flex pipe or duct by a list of points, system type, flex duct type or flex pipe type, level and diameter., GetParameterAsProjectUnits - Returns the parameter value in the same unit type as the project settings, GetParameterAsValueString - Returns the parameter values without conversion to the revit internal unit system. The suffix boolean toggles the project units on or off, Linked file change paths - This node will allow you to change the path of a linked file without opening the file. All you need is a file path of the host model and the linked file, Linked file info by filepath - Returns linked file info: filepath, link type and link status, Mechanical System Graphic Override set LineColor - Sets the linecolor of the mechanical system graphic override, Mechanical System Graphic Override set LinePattern - Sets the line pattern in the mechanical system type's graphic override, Mechanical System Graphic Override set LineWeight - This will change the lineweight override of the mechanical system type, MechanicalFitting info - Gets the fitting Part Type and number of connectors, MEP Connector info+ - This node will return the connectors and a lot of information about those connectors of the input elements, MEP connector info - Returns location, connector info and connected elements, MEP Curve connected fittings - Returns the fittings, ducts accessories and terminals connected to the given duct, cable tray, pipe or conduit. Also return air terminals on Ducts, MEP Fitting connected MEPCurves - Returns the pipes, ducts, conduits or cable trays that are connected to the given fittings, MEPCurveType.JunctionType - Returns the preferred JunctionType (tap or tee) of a DuctType or PipeType, MEPFitting.ByMEPCurves - Creates a UnionFitting or ElbowFitting by 2 MEPCurves (Ducts, Cable Trays, Pipes or Conduits). The output may not always be all the fittings created as Revit sometimes creates extra transition fittings outside of the node transactions., MEPFitting.ByPointsAndCurve - Places accessories or fittings in a pipe or duct, MEPSystem number of networks - Returns the number of physical networks in the system, MEPSystem.AddToSystem - Add elements to a Duct or Pipe system, MEPSystem.CreateSystem - Creates a duct or piping system by providing a Mechanical- or PipingSystemType. Optional names can be provided for the systems, MEPSystem.DivideSystem - Divide a duct or piping system into separate systems if possible, MEPSystem.IsDividable - Returns a boolean indicating if the system can be divided into multiple systems, Nearest value from list of values - Finds the nearest values from a given list of values, Zone.NewZone - Creates a new zone by level and phase, PanelScheduleView.ElectricalCircuits - Returns the circuits that are listed in the panelschedule, this includes spare circuits., PanelScheduleView.NumberOfAssignedCircuits - This will return the number of assigned circuits on a panelschedule. Spares and spaces also count as an assigned circuit., PanelScheduleView.NumberOfSlots - Returns the number of available slots in a panelschedule, Pipe upstream components - This node will try to return the connected elements in the upstream network. It will stop once it encounters an element twice or encounters a different system classification or cannot find a connector with an opposing direction., Pipe.ByConnectorEndpoint - Creates a pipe from the connector to the given point., Pipe.ByConnectors - Creates a new pipe between 2 connectors, Pipe.ByLines - Creates a pipe by Line, PipeType, SystemType, Level and Diameter, PipeSegment.SetName - Changes the name of the pipe segment (found under MEP Settings), Room or Space reset center location - This node will attempt to reset the location of the room or space to its default center location, RoomAtPoint - Returns the room at the location of the point. Returns null if no room is there, Rooms place automatically for all levels - This node will attempt to create rooms automatically for every level, SetParameterAsProjectUnits - Sets the parameters by project unit inputs, no need to convert to Revit internal units first., SetParameterSetValueString - Sets the parameters by strings. Useful for setting numerical values that are affected by Revit's internal  unit conversion. Does not work for parameters that are stored as elementId, Space number to duct network concatenate - This node will attempt to write the space numbers to connected duct objects in the network. Input AirTerminals need to be placed in spaces. ParameterName is the parameter to write the space number to. Numbers will be concatenated if they serve multiple spaces. Multiple Categories supported, Space number to duct network - This node will attempt to write the space number to connected duct objects in the network. Input AirTerminals need to be placed in spaces. ParameterName is the parameter to write the space number to. Numbering stops when it encounters an element from another space. Multiple Categories supported, SpaceAtPoint - Returns the space at the location of the point. Returns null if no space is there, SpaceCoordination create new spaces - Creates a new space for every room with a new room number from the linked document, SpaceCoordination delete redundant spaces - Will delete spaces for which no matching room number can be found in the given linked document, SpaceCoordination Manager - This node will align all spaces in the model to the rooms from a linked model. It will delete spaces that can't find a corresponding room number, move spaces to rooms with the same number and create new spaces for rooms with new room numbers., SpaceCoordination move to associated room - Will move the space to the room with the same space/room number (if a room with the same number exists), Spaces place automatically for all levels - This node will attempt to create spaces automatically for every level, Tag Get Location - Returns the location of the tags, Tag Get View - Return the view on which the tag is placed, Tap.By2MEPCurves - Create a new TakeoffFitting or Tap by takeoff pipe and through pipe, Tee.By2MEPCurves - Creates a tee by a main curve and a branch MEP curve (duct, pipe, conduit, cable tray). Only works with perpendicular brand curves, Tee.By3MEPCurves - Creates a new Tee fitting for the 3 input MEP curves (conduit, cable tray, duct or pipe). Only works with a perpendicular branch MEPCurve, View.GetCropBoxCurves - returns the curves of a view crop box, even irregular shapes. Returns an empty list if the crop view is not active for a given view, View.SetCategoryVisibility - Will set the category visibility for the view. Does not work if a view template dictates the category visibility, View.SetCropBoxCurves - Input views and lists of curves to set the view crop regions, View.ViewRange absolute - Returns the 4 view range values relative in absolute Z values, View.ViewRange relative - Returns the 4 view range values relative to the view's level, Zone.AddSpaces - Will add the spaces to zone, Zone.Spaces - Returns the spaces that are assigned to the Zone","engine_version":"1.3.3.4111","engine":"dynamo","engine_metadata":"","site_url":"https://bimstallatie.sites.google.com/site/bimstallatie/dynamo/mepover-package","repository_url":"","contains_binaries":false,"node_libraries":[]}