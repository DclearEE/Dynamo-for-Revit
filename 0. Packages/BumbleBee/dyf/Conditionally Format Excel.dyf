<Workspace Version="1.1.0.2094" X="-154.612129873764" Y="-336.457845405011" zoom="1.79400970938056" Name="Conditionally Format Excel" Description="This node will allow you to apply conditional formatting to an Excel document or a specific range within the document." ID="43ac48f5-8093-4c9b-94ac-19a233c0bc06" Category="Archi-lab_Bumblebee.Format">
  <NamespaceResolutionMap />
  <Elements>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="eac6f562-66b2-4286-9189-ab7e8d034fe1" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="228.077117353796" y="238.330991828094" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="filePath: var = null" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="f93950f0-7e83-4119-8e8d-d943c76ff86c" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="219.503859072727" y="318.161566204585" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="RunIt : bool = false" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="37f8e56e-ddbb-4bc2-9f39-9d076553a4e0" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="301.82876357392" y="373.051182108439" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="SheetName" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="33cce86e-77d6-48a3-83e6-cd5804d77416" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="302.976402551336" y="429.627952076804" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="CellRange" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="1e26983a-8ec9-4639-aa1d-859a9b02b266" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="304.124041528752" y="487.663383387035" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="FormatConditions" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="15cbc59a-4d0e-4f3a-bb1c-2ca20dacdd13" type="Dynamo.Graph.Nodes.CustomNodes.Output" nickname="Output" x="703.096456868977" y="303.657482427722" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <Symbol value="OUT" />
    </Dynamo.Graph.Nodes.CustomNodes.Output>
    <PythonNodeModels.PythonNode guid="2a18b359-867c-4bc6-8589-4d0dbc862187" type="PythonNodeModels.PythonNode" nickname="Python Script" x="549.374146187987" y="303.713720475506" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false" inputcount="5">
      <Script># Copyright(c) 2016, David Mans, Konrad Sobon
# @arch_laboratory, http://archi-lab.net, http://neoarchaic.net

import clr
import sys
import System
from System import Array
from System.Collections.Generic import *

clr.AddReferenceByName('Microsoft.Office.Interop.Excel, Version=11.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c')
from Microsoft.Office.Interop import Excel
System.Threading.Thread.CurrentThread.CurrentCulture = System.Globalization.CultureInfo("en-US")
from System.Runtime.InteropServices import Marshal

pyt_path = r'C:\Program Files (x86)\IronPython 2.7\Lib'
sys.path.append(pyt_path)

import System
assemblies = System.AppDomain.CurrentDomain.GetAssemblies()
path1 = [a.Location for a in assemblies if 'bbIcons,' in a.FullName][0]
path2 = System.IO.Path.GetDirectoryName(path1).rsplit('\\',1)[0]
bb_path = '%s\\extra\\' %path2
sys.path.append(bb_path)

import bumblebee as bb
import string
import re

#The inputs to this node will be stored as a list in the IN variable.
dataEnteringNode = IN

filePath = IN[0]
runMe = IN[1]
sheetName = IN[2]
cellRange = IN[3]
formatConditions = IN[4]

if filePath != None:
	if filePath.GetType() == System.IO.FileInfo:
		filePath = filePath.FullName

def SetUp(xlApp):
	# supress updates and warning pop ups
	xlApp.Visible = False
	xlApp.DisplayAlerts = False
	xlApp.ScreenUpdating = False
	return xlApp

def CleanUp(_list):
	# clean up before exiting excel, if any COM object remains
	# unreleased then excel crashes on open following time
	if isinstance(_list, list):
		for i in _list:
			try:
				Marshal.ReleaseComObject(i)
			except:
				pass
	else:
		try:
			Marshal.ReleaseComObject(_list)
		except:
			pass
	return None

def ExitExcel(filePath, xlApp, wb, ws):
	# save any changes and clean up excel sessions
	wb.SaveAs(unicode(filePath))
	xlApp.ActiveWorkbook.Close(False)
	xlApp.ScreenUpdating = True
	CleanUp([ws,wb,xlApp])
	return None

def LiveStream():
	try:
		xlApp = Marshal.GetActiveObject("Excel.Application")
		xlApp.Visible = True
		xlApp.DisplayAlerts = False
		return xlApp
	except:
		return None

def ConditionFormatCells(origin, extent, ws, formatConditions):
	
	def AddFormatCondition(origin=None, extent=None, ws=None, formatConditions=None, index=None):
		fcType = formatConditions.FormatConditionType()
		if fcType == 1:
			operatorType = formatConditions.OperatorType()
			values = formatConditions.Values()
			if operatorType == 2 or operatorType == 1:
				ws.Range[origin, extent].FormatConditions.Add(fcType, operatorType, values[1], values[0])
			else:
				ws.Range[origin, extent].FormatConditions.Add(fcType, operatorType, values)
				
		if fcType == 2:
			operatorType = formatConditions.OperatorType()
			expression = formatConditions.Expression()
			ws.Range[origin, extent].FormatConditions.Add(fcType, operatorType, expression)
			
		if fcType == "2Color":
			ws.Range[origin, extent].FormatConditions.AddColorScale(ColorScaleType = 2)
		
		if fcType == "3Color":
			ws.Range[origin, extent].FormatConditions.AddColorScale(ColorScaleType = 3)
		
		if fcType == "TopPercentile":
			ws.Range[origin, extent].FormatConditions.AddTop10()
			if index == None:
				index = 1
			else:
				index = index + 1
			ws.Range[origin, extent].FormatConditions(index).Percent = formatConditions.Percent()
			ws.Range[origin, extent].FormatConditions(index).Rank = formatConditions.Rank()
			ws.Range[origin, extent].FormatConditions(index).TopBottom = formatConditions.TopBottom()

		if fcType == "DataBar":
			ws.Range[origin, extent].FormatConditions.AddDataBar()

		return ws
		
	def FormatGraphics(origin=None, extent=None, ws=None, formatConditions=None, index=None):
		if index == None:
			index = 1
		else:
			index = index + 1
			
		if formatConditions.FormatConditionType() == "2Color":
			ws.Range[origin, extent].FormatConditions(index).ColorScaleCriteria(1).Type = formatConditions.MinType()
			ws.Range[origin, extent].FormatConditions(index).ColorScaleCriteria(1).FormatColor.Color = formatConditions.MinColor()
			if formatConditions.MinType() != 1:
				ws.Range[origin, extent].FormatConditions(index).ColorScaleCriteria(1).Value = formatConditions.MinValue()
			ws.Range[origin, extent].FormatConditions(index).ColorScaleCriteria(2).Type = formatConditions.MaxType()
			ws.Range[origin, extent].FormatConditions(index).ColorScaleCriteria(2).FormatColor.Color = formatConditions.MaxColor()
			if formatConditions.MaxType() != 2:
				ws.Range[origin, extent].FormatConditions(index).ColorScaleCriteria(2).Value = formatConditions.MaxValue()
			
		elif formatConditions.FormatConditionType() == "3Color":
			# set min type/value/color
			ws.Range[origin, extent].FormatConditions(index).ColorScaleCriteria(1).Type = formatConditions.MinType()
			ws.Range[origin, extent].FormatConditions(index).ColorScaleCriteria(1).FormatColor.Color = formatConditions.MinColor()
			if formatConditions.MinType() != 1:
				ws.Range[origin, extent].FormatConditions(index).ColorScaleCriteria(1).Value = formatConditions.MinValue()
			# set mid type/value/color
			ws.Range[origin, extent].FormatConditions(index).ColorScaleCriteria(2).Type = formatConditions.MidType()
			ws.Range[origin, extent].FormatConditions(index).ColorScaleCriteria(2).FormatColor.Color = formatConditions.MidColor()
			ws.Range[origin, extent].FormatConditions(index).ColorScaleCriteria(2).Value = formatConditions.MidValue()
			# set max type/value/color
			ws.Range[origin, extent].FormatConditions(index).ColorScaleCriteria(3).Type = formatConditions.MaxType()
			ws.Range[origin, extent].FormatConditions(index).ColorScaleCriteria(3).FormatColor.Color = formatConditions.MaxColor()
			if formatConditions.MaxType() != 2:
				ws.Range[origin, extent].FormatConditions(index).ColorScaleCriteria(3).Value = formatConditions.MaxValue()
		
		elif formatConditions.FormatConditionType() == "DataBar":
			if formatConditions.MinType() != 1 and formatConditions.MinType() != 6:
				ws.Range[origin, extent].FormatConditions(index).MinPoint.Modify(newtype = formatConditions.MinType(), newvalue = formatConditions.MinValue())
			else:
				ws.Range[origin, extent].FormatConditions(index).MinPoint.Modify(newtype = formatConditions.MinType())
			if formatConditions.MaxType() != 2 and formatConditions.MaxType() != 7:
				ws.Range[origin, extent].FormatConditions(index).MaxPoint.Modify(newtype = formatConditions.MaxType(), newvalue = formatConditions.MaxValue())
			else:
				ws.Range[origin, extent].FormatConditions(index).MaxPoint.Modify(newtype = formatConditions.MaxType())
			
			if formatConditions.BorderColor() != None:
				ws.Range[origin, extent].FormatConditions(index).BarBorder.Type = 1
			else:
				ws.Range[origin, extent].FormatConditions(index).BarBorder.Type = 0
			ws.Range[origin, extent].FormatConditions(index).ShowValue = True
			ws.Range[origin, extent].FormatConditions(index).BarFillType = formatConditions.GradientFill()
			ws.Range[origin, extent].FormatConditions(index).BarColor.Color = formatConditions.FillColor()
			ws.Range[origin, extent].FormatConditions(index).BarBorder.Color.Color = formatConditions.BorderColor()
			ws.Range[origin, extent].FormatConditions(index).Direction = formatConditions.DirectionType()

		else:
			fillStyle = formatConditions.GraphicStyle().fillStyle
			textStyle = formatConditions.GraphicStyle().textStyle
			borderStyle = formatConditions.GraphicStyle().borderStyle
			
			if fillStyle.backgroundColor != None:
				ws.Range[origin, extent].FormatConditions(index).Interior.Color = fillStyle.BackgroundColor()
			if fillStyle.patternType != None:
				ws.Range[origin, extent].FormatConditions(index).Interior.Pattern = fillStyle.PatternType()
			if fillStyle.patternColor != None:
				ws.Range[origin, extent].FormatConditions(index).Interior.PatternColor = fillStyle.PatternColor()
			ws.Range[origin, extent].FormatConditions(index).StopIfTrue = False
		return ws

	ws.Range[origin, extent].FormatConditions.Delete()
	if not isinstance(formatConditions, list):
		AddFormatCondition(origin, extent, ws, formatConditions)
		FormatGraphics(origin, extent, ws, formatConditions, None)
	else:
		for index, value in enumerate(formatConditions):
			AddFormatCondition(origin, extent, ws, value)
			FormatGraphics(origin, extent, ws, value, index)
	return ws
	
if runMe:
	message = None
	try:
		errorReport = None
		message = "Success!"
		if filePath == None:
			# run excel in live mode
			xlApp = LiveStream()
			wb = xlApp.ActiveWorkbook
			if sheetName == None:
				ws = xlApp.ActiveSheet
			else:
				ws = xlApp.Sheets(sheetName)
			if not isinstance(cellRange, list):
				origin = ws.Cells(bb.xlRange(cellRange)[1], bb.xlRange(cellRange)[0])
				extent = ws.Cells(bb.xlRange(cellRange)[3], bb.xlRange(cellRange)[2])
				ConditionFormatCells(origin, extent, ws, formatConditions)
			else:
				for index, (range, format) in enumerate(zip(cellRange, formatConditions)):
					origin = ws.Cells(bb.xlRange(range)[1], bb.xlRange(range)[0])
					extent = ws.Cells(bb.xlRange(range)[3], bb.xlRange(range)[2])
					ConditionFormatCells(origin, extent, ws, format)
		else:
			try:
				xlApp = SetUp(Excel.ApplicationClass())		
				if os.path.isfile(unicode(filePath)):
					xlApp.Workbooks.open(unicode(filePath))
					wb = xlApp.ActiveWorkbook
					ws = xlApp.Sheets(sheetName)
					if not isinstance(cellRange, list):
						origin = ws.Cells(bb.xlRange(cellRange)[1], bb.xlRange(cellRange)[0])
						extent = ws.Cells(bb.xlRange(cellRange)[3], bb.xlRange(cellRange)[2])
						ConditionFormatCells(origin, extent, ws, formatConditions)
						Marshal.ReleaseComObject(extent)
						Marshal.ReleaseComObject(origin)
					else:
						for index, (range, format) in enumerate(zip(cellRange, formatConditions)):
							origin = ws.Cells(bb.xlRange(range)[1], bb.xlRange(range)[0])
							extent = ws.Cells(bb.xlRange(range)[3], bb.xlRange(range)[2])
							ConditionFormatCells(origin, extent, ws, format)
							Marshal.ReleaseComObject(extent)
							Marshal.ReleaseComObject(origin)
					ExitExcel(filePath, xlApp, wb, ws)
			except:
				xlApp.Quit()
				Marshal.ReleaseComObject(xlApp)
	except:
		# if error accurs anywhere in the process catch it
		import traceback
		errorReport = traceback.format_exc()
		pass
else:
	errorReport = "Run Me is set to False. Please set \nto True if you wish to write data \nto Excel."

#Assign your output to the OUT variable
if errorReport == None:
	OUT = message
else:
	OUT = errorReport</Script>
    </PythonNodeModels.PythonNode>
  </Elements>
  <Connectors>
    <Dynamo.Graph.Connectors.ConnectorModel start="eac6f562-66b2-4286-9189-ab7e8d034fe1" start_index="0" end="2a18b359-867c-4bc6-8589-4d0dbc862187" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="f93950f0-7e83-4119-8e8d-d943c76ff86c" start_index="0" end="2a18b359-867c-4bc6-8589-4d0dbc862187" end_index="1" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="37f8e56e-ddbb-4bc2-9f39-9d076553a4e0" start_index="0" end="2a18b359-867c-4bc6-8589-4d0dbc862187" end_index="2" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="33cce86e-77d6-48a3-83e6-cd5804d77416" start_index="0" end="2a18b359-867c-4bc6-8589-4d0dbc862187" end_index="3" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="1e26983a-8ec9-4639-aa1d-859a9b02b266" start_index="0" end="2a18b359-867c-4bc6-8589-4d0dbc862187" end_index="4" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="2a18b359-867c-4bc6-8589-4d0dbc862187" start_index="0" end="15cbc59a-4d0e-4f3a-bb1c-2ca20dacdd13" end_index="0" portType="0" />
  </Connectors>
  <Notes />
  <Annotations />
  <Presets />
  <Cameras>
    <Camera Name="Background Preview" eyeX="-17" eyeY="24" eyeZ="50" lookX="12" lookY="-13" lookZ="-58" upX="0" upY="1" upZ="0" />
  </Cameras>
</Workspace>