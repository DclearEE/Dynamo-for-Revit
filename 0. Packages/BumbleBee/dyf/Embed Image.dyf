<Workspace Version="1.1.0.2094" X="-287.373709354957" Y="-231.941110472221" zoom="1.40972876398001" Name="Embed Image" Description="This node will embed an image into an Excel document." ID="dc233281-eef1-4a51-902f-8c0c91ae87b2" Category="Archi-lab_Bumblebee.Write">
  <NamespaceResolutionMap />
  <Elements>
    <PythonNodeModels.PythonNode guid="a311b965-410a-4aab-87bc-edbf970fdc3c" type="PythonNodeModels.PythonNode" nickname="Python Script" x="830.858488377644" y="350.056450443621" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false" inputcount="4">
      <Script># Copyright(c) 2016, David Mans, Konrad Sobon
# @arch_laboratory, http://archi-lab.net, http://neoarchaic.net

import clr
import sys
import System
from System import Array
from System.Collections.Generic import *

clr.AddReferenceByName('Microsoft.Office.Interop.Excel, Version=11.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c')
from Microsoft.Office.Interop import Excel
System.Threading.Thread.CurrentThread.CurrentCulture = System.Globalization.CultureInfo("en-US")
from System.Runtime.InteropServices import Marshal

pyt_path = r'C:\Program Files (x86)\IronPython 2.7\Lib'
sys.path.append(pyt_path)
from os import path

assemblies = System.AppDomain.CurrentDomain.GetAssemblies()
path1 = [a.Location for a in assemblies if 'bbIcons,' in a.FullName][0]
path2 = System.IO.Path.GetDirectoryName(path1).rsplit('\\',1)[0]
bb_path = '%s\\extra\\' %path2
sys.path.append(bb_path)
import bumblebee as bb

#The inputs to this node will be stored as a list in the IN variable.
dataEnteringNode = IN

filePath = IN[0]
runMe = IN[1]
data = IN[2]
styles = IN[3]

if filePath != None:
	if filePath.GetType() == System.IO.FileInfo:
		filePath = filePath.FullName

def ProcessParallelLists(_func, *lists):
	return map( lambda *xs: ProcessParallelLists(_func, *xs) if all(type(x) is list for x in xs) else _func(*xs), *lists )

def EmbedImage(ws, data, style):
	def EmbedImage2(origin, path, name, ws = ws, width = style.width, height = style.height, link = styles.linkToFile, embed = styles.saveWithDoc):
		img = None
		try:
			img = ws.Shapes(name)
		except:
			pass
		if img == None:
			img = ws.Shapes.AddPicture(path, link, embed, 100, 100, width, height)
			img.Name = name
			img.Left = ws.Cells[bb.CellIndex(origin)[1], bb.CellIndex(origin)[0]].Left
			img.Top = ws.Cells[bb.CellIndex(origin)[1], bb.CellIndex(origin)[0]].Top
			img.Placement = 1
		else:
			img.Left = ws.Cells[bb.CellIndex(origin)[1], bb.CellIndex(origin)[0]].Left
			img.Top = ws.Cells[bb.CellIndex(origin)[1], bb.CellIndex(origin)[0]].Top
			img.Placement = 1
		
		return ws
	if isinstance(data.data, list):
		ProcessParallelLists(EmbedImage2, data.origin, data.data, style.name)
	else:
		EmbedImage2(data.origin, data.data, style.name)

def SetUp(xlApp):
	# supress updates and warning pop ups
	xlApp.Visible = False
	xlApp.DisplayAlerts = False
	xlApp.ScreenUpdating = False
	return xlApp

def ExitExcel(filePath, xlApp, wb, ws):
	def CleanUp(_list):
		if isinstance(_list, list):
			for i in _list:
				Marshal.ReleaseComObject(i)
		else:
			Marshal.ReleaseComObject(_list)
		return None
	
	wb.SaveAs(unicode(filePath))
	xlApp.ActiveWorkbook.Close(False)
	xlApp.ScreenUpdating = True
	CleanUp([ws,wb,xlApp])
	return None

def LiveStream():
	try:
		xlApp = Marshal.GetActiveObject("Excel.Application")
		xlApp.Visible = True
		xlApp.DisplayAlerts = False
		return xlApp
	except:
		return None

if runMe:
	try:
		errorReport = None
		if filePath == None:
			# run excel in a live mode
			xlApp = LiveStream()
			# if excel is running and data is being written to single sheet
			if not isinstance(data, list):
				wb = xlApp.ActiveWorkbook
				try:
					if data.sheetName == None:
						ws = xlApp.ActiveSheet
					else:
						ws = xlApp.Sheets(data.sheetName)
				except:
					pass
				EmbedImage(ws, data, styles)
			# if excel is running and data is being written to multiple sheets
			else:
				wb = xlApp.ActiveWorkbook
				for i in data:
					ws = xlApp.Sheets(i.SheetName())
					EmbedImage(ws , i, styles)
		else:
			try:
				xlApp = SetUp(Excel.ApplicationClass())
				# if excel is closed and data is being written to single sheet
				if not isinstance(data, list):
					xlApp.Workbooks.open(unicode(filePath))
					wb = xlApp.ActiveWorkbook
					ws = xlApp.Sheets(styles.SheetName())
					EmbedImage(ws, data, styles)
					ExitExcel(filePath, xlApp, wb, ws)
				# if excel is closed and data is being written to multiple sheets
				else:
					xlApp.Workbooks.open(unicode(filePath))
					wb = xlApp.ActiveWorkbook
					for i in data:
						ws = xlApp.Sheets(i.SheetName())
						EmbedImage(ws , i, styles)
					ExitExcel(filePath, xlApp, wb, ws)
			except:
				xlApp.Quit()
				Marshal.ReleaseComObject(xlApp)
	except:
			# if error accurs anywhere in the process catch it
			import traceback
			errorReport = traceback.format_exc()
else:
	errorReport = "Run Me is set to False. Please set \nto True if you wish to write data \nto Excel."

if errorReport == None:
	OUT = "Success!"
else:
	OUT = errorReport</Script>
    </PythonNodeModels.PythonNode>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="7601721b-98cd-4cf8-a4ba-b768d5b93ced" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="356.044646696921" y="263.754213662085" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="//FilePath to Excel file on drive.&#xD;&#xA;//Leave empty to access Excel in &quot;live mode&quot;.&#xD;&#xA;filePath: string = null" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="30d5cb32-3393-4a21-a22f-a18e5c433c9a" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="418.613187044111" y="356.400224140529" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="//Set to &quot;true&quot; to execute this node.&#xD;&#xA;RunIt: bool = false" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="67eaeb8b-201e-4407-9aae-d250382be705" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="179.397445791681" y="424.433425460585" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="//BBData node must have a list of FilePaths as input to Data.&#xD;&#xA;//BBData node must have a list of Origin cells as input to Origin.&#xD;&#xA;BBData" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="d2532b6d-67ab-48cb-bac8-54df5249d614" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="127.724402887559" y="509.001740971932" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="//ImageStyle for the embedded images.&#xD;&#xA;//ImageStyle node must have matching list for Name input (Origin, Data).&#xD;&#xA;imageStyle" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="267ada2c-713c-4438-af70-0dda261d1888" type="Dynamo.Graph.Nodes.CustomNodes.Output" nickname="Output" x="1108.70049155541" y="348.970340264744" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <Symbol value="OUT" />
    </Dynamo.Graph.Nodes.CustomNodes.Output>
  </Elements>
  <Connectors>
    <Dynamo.Graph.Connectors.ConnectorModel start="a311b965-410a-4aab-87bc-edbf970fdc3c" start_index="0" end="267ada2c-713c-4438-af70-0dda261d1888" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="7601721b-98cd-4cf8-a4ba-b768d5b93ced" start_index="0" end="a311b965-410a-4aab-87bc-edbf970fdc3c" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="30d5cb32-3393-4a21-a22f-a18e5c433c9a" start_index="0" end="a311b965-410a-4aab-87bc-edbf970fdc3c" end_index="1" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="67eaeb8b-201e-4407-9aae-d250382be705" start_index="0" end="a311b965-410a-4aab-87bc-edbf970fdc3c" end_index="2" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="d2532b6d-67ab-48cb-bac8-54df5249d614" start_index="0" end="a311b965-410a-4aab-87bc-edbf970fdc3c" end_index="3" portType="0" />
  </Connectors>
  <Notes />
  <Annotations />
  <Presets />
  <Cameras>
    <Camera Name="Background Preview" eyeX="-17" eyeY="24" eyeZ="50" lookX="12" lookY="-13" lookZ="-58" upX="0" upY="1" upZ="0" />
  </Cameras>
</Workspace>