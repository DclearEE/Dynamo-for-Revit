<Workspace Version="1.3.0.875" X="-151.113798361236" Y="-100.400094267775" zoom="1.47618023926361" ScaleFactor="1" Name="Write Excel" Description="This node will write data to Excel file and based on how your BBData nodes are structured it will either override the exsting file, create a new one and write a single worksheet or write multiple worksheets. " ID="72e88648-ec17-4934-8376-d6c1f6183d67" Category="Archi-lab_Bumblebee.Write">
  <NamespaceResolutionMap />
  <Elements>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="c356599c-e221-4b9a-a3dd-190629348078" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="287.083513067391" y="225.405706350634" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="filePath: var = null" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="4d777cdc-df53-47ec-9b9f-985d8eff7c8b" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="285.620111827011" y="289.469508381868" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="RunIt: bool = false" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="d9a7965b-5404-4321-8223-4c75029f4002" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="260.774012720888" y="347.903534044665" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="ByColumn: bool = false" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="d89038f9-dcf9-4a57-b7ef-fbbef3e8fe73" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="386.595845545624" y="405.286719471978" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="BBData" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="b7ab4540-a43e-493c-bc31-eaf56881c907" type="Dynamo.Graph.Nodes.CustomNodes.Output" nickname="Output" x="737.092191370107" y="277.979033845477" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <PortInfo index="0" default="False" />
      <Symbol value="OUT" />
    </Dynamo.Graph.Nodes.CustomNodes.Output>
    <PythonNodeModels.PythonNode guid="89ad47f9-938f-4826-9455-2f6dd539fa7c" type="PythonNodeModels.PythonNode" nickname="Python Script" x="571.268603531058" y="278.240651582839" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false" inputcount="4">
      <PortInfo index="0" default="False" />
      <PortInfo index="1" default="False" />
      <PortInfo index="2" default="False" />
      <PortInfo index="3" default="False" />
      <Script># Copyright(c) 2016, David Mans, Konrad Sobon
# @arch_laboratory, http://archi-lab.net, http://neoarchaic.net

import clr
import sys
import System
from System import Array
from System.Collections.Generic import *

clr.AddReferenceByName('Microsoft.Office.Interop.Excel, Version=11.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c')
from Microsoft.Office.Interop import Excel
System.Threading.Thread.CurrentThread.CurrentCulture = System.Globalization.CultureInfo("en-US")
from System.Runtime.InteropServices import Marshal

pyt_path = r'C:\Program Files (x86)\IronPython 2.7\Lib'
sys.path.append(pyt_path)

from os import path
assemblies = System.AppDomain.CurrentDomain.GetAssemblies()
path1 = [a.Location for a in assemblies if 'bbIcons,' in a.FullName][0]
path2 = System.IO.Path.GetDirectoryName(path1).rsplit('\\',1)[0]
bb_path = '%s\\extra\\' %path2
sys.path.append(bb_path)
import bumblebee as bb
import os

#The inputs to this node will be stored as a list in the IN variable.
dataEnteringNode = IN

filePath = IN[0]
runMe = IN[1]
byColumn = IN[2]
data = IN[3]

if filePath != None:
	if filePath.GetType() == System.IO.FileInfo:
		filePath = filePath.FullName

def LiveStream():
	try:
		xlApp = Marshal.GetActiveObject("Excel.Application")
		xlApp.Visible = True
		xlApp.DisplayAlerts = False
		return xlApp
	except:
		return None

def SetUp(xlApp):
	# supress updates and warning pop ups
	xlApp.Visible = False
	xlApp.DisplayAlerts = False
	xlApp.ScreenUpdating = False
	return xlApp

def WriteData(ws, data, byColumn, origin):

	def FillData(x, y, x1, y1, ws, data, origin):
		if origin != None:
			x = x + origin[1]
			y = y + origin[0]
		else:
			x = x + 1
			y = y + 1
		if y1 != None:
			ws.Cells[x, y] = data[x1][y1]
		else:
			ws.Cells[x, y] = data[x1]
		return ws
	# if data is a nested list (multi column/row) use this
	if any(isinstance(item, list) for item in data):
		for i, valueX in enumerate(data):
			for j, valueY in enumerate(valueX):
				if byColumn:
					FillData(j,i,i,j, ws, data, origin)
				else:
					FillData(i,j,i,j, ws, data, origin)
	# if data is just a flat list (single column/row) use this
	else:
		for i, valueX in enumerate(data):
			if byColumn:
				FillData(i,0,i,None, ws, data, origin)
			else:
				FillData(0,i,i,None, ws, data, origin)
	return ws

def ExitExcel(filePath, xlApp, wb, ws):
	# clean up before exiting excel, if any COM object remains
	# unreleased then excel crashes on open following time
	def CleanUp(_list):
		if isinstance(_list, list):
			for i in _list:
				Marshal.ReleaseComObject(i)
		else:
			Marshal.ReleaseComObject(_list)
		return None
	
	wb.SaveAs(unicode(filePath))
	xlApp.ActiveWorkbook.Close(False)
	xlApp.ScreenUpdating = True
	CleanUp([ws,wb,xlApp])
	return None

def Flatten(*args):
    for x in args:
        if hasattr(x, '__iter__'):
            for y in Flatten(*x):
                yield y
        else:
            yield x

def WorksheetExists(wb, name):
	for i in wb.Sheets:
		if i.Name == name:
			return True
			break
		else:
			continue
	return False

if isinstance(data, list):
	if any(isinstance(x, list) for x in data):
		data = list(Flatten(data))

live = False

if runMe:
	try:
		errorReport = None
		if filePath == None:
			# run excel in live mode
			xlApp = LiveStream()
			live = True
			wb = xlApp.ActiveWorkbook
		else:
			# run excel from a file on disk
			xlApp = SetUp(Excel.ApplicationClass())
			live = False
			# if file exists open it
			if os.path.isfile(unicode(filePath)):
				xlApp.Workbooks.open(unicode(filePath))
				wb = xlApp.ActiveWorkbook
			# if file doesn't exist just make a new one
			else:
				wb = xlApp.Workbooks.Add()
				if not isinstance(data, list):
					# add and rename worksheet
					ws = wb.Worksheets[1]
					ws.Name = data.SheetName()
				else:
					for i in data:
						# if worksheet doesn't exist add it and name it
						if not WorksheetExists(wb, i.SheetName()):
							wb.Sheets.Add(After = wb.Sheets(wb.Sheets.Count), Count = 1)
							ws = wb.Worksheets[wb.Sheets.Count]
							ws.Name = i.SheetName()
		# data is a flat list - single sheet gets written
		if not isinstance(data, list):
			if WorksheetExists(wb, data.SheetName()):
				ws = xlApp.Sheets(data.SheetName())
			else:
				wb.Sheets.Add(After = wb.Sheets(wb.Sheets.Count), Count = 1)
				ws = wb.Worksheets[wb.Sheets.Count]
				ws.Name = data.SheetName()
			WriteData(ws, data.Data(), byColumn, data.Origin())
			if not live:
				ExitExcel(filePath, xlApp, wb, ws)
		# data is a nested list - multiple sheets are written
		else:
			sheetNameSet = set([x.SheetName() for x in data])
			for i in data:
				if WorksheetExists(wb, i.SheetName()):
					ws = xlApp.Sheets(i.SheetName())
				else:
					wb.Sheets.Add(After = wb.Sheets(wb.Sheets.Count), Count = 1)
					ws = wb.Worksheets[wb.Sheets.Count]
					ws.Name = i.SheetName()
				WriteData(ws, i.Data(), byColumn, i.Origin())
			if not live:
				ExitExcel(filePath, xlApp, wb, ws)
				
	except:
		xlApp.Quit()
		Marshal.ReleaseComObject(xlApp)
		# if error accurs anywhere in the process catch it
		import traceback
		errorReport = traceback.format_exc()
		pass
else:
	errorReport = "Set RunMe to True."

#Assign your output to the OUT variable
if errorReport == None:
	OUT = "Success!"
else:
	OUT = errorReport</Script>
    </PythonNodeModels.PythonNode>
  </Elements>
  <Connectors>
    <Dynamo.Graph.Connectors.ConnectorModel start="c356599c-e221-4b9a-a3dd-190629348078" start_index="0" end="89ad47f9-938f-4826-9455-2f6dd539fa7c" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="4d777cdc-df53-47ec-9b9f-985d8eff7c8b" start_index="0" end="89ad47f9-938f-4826-9455-2f6dd539fa7c" end_index="1" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="d9a7965b-5404-4321-8223-4c75029f4002" start_index="0" end="89ad47f9-938f-4826-9455-2f6dd539fa7c" end_index="2" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="d89038f9-dcf9-4a57-b7ef-fbbef3e8fe73" start_index="0" end="89ad47f9-938f-4826-9455-2f6dd539fa7c" end_index="3" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="89ad47f9-938f-4826-9455-2f6dd539fa7c" start_index="0" end="b7ab4540-a43e-493c-bc31-eaf56881c907" end_index="0" portType="0" />
  </Connectors>
  <Notes />
  <Annotations />
  <Presets />
  <Cameras>
    <Camera Name="Background Preview" eyeX="-17" eyeY="24" eyeZ="50" lookX="12" lookY="-13" lookZ="-58" upX="0" upY="1" upZ="0" />
  </Cameras>
</Workspace>